//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Report {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
    [Serializable()]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("LUA")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class LUA : Devart.Data.MySql.MySqlDataSet {
        
        private an_analistaDataTable tablean_analista;
        
        private ch_categoriaDataTable tablech_categoria;
        
        private ch_chamadoDataTable tablech_chamado;
        
        private ch_softwareDataTable tablech_software;
        
        private ch_telarotinaDataTable tablech_telarotina;
        
        private cl_clienteDataTable tablecl_cliente;
        
        private co_contadorDataTable tableco_contador;
        
        private tb_parametrosDataTable tabletb_parametros;
        
        private TableDataTable table_Table;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        private bool _shouldSerializeConnection = false;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LUA() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected LUA(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                Devart.Data.MySql.MySqlDataSet ds = new Devart.Data.MySql.MySqlDataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["an_analista"] != null)) {
                    base.Tables.Add(new an_analistaDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["an_analista"]))));
                }
                if ((ds.Tables["ch_categoria"] != null)) {
                    base.Tables.Add(new ch_categoriaDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["ch_categoria"]))));
                }
                if ((ds.Tables["ch_chamado"] != null)) {
                    base.Tables.Add(new ch_chamadoDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["ch_chamado"]))));
                }
                if ((ds.Tables["ch_software"] != null)) {
                    base.Tables.Add(new ch_softwareDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["ch_software"]))));
                }
                if ((ds.Tables["ch_telarotina"] != null)) {
                    base.Tables.Add(new ch_telarotinaDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["ch_telarotina"]))));
                }
                if ((ds.Tables["cl_cliente"] != null)) {
                    base.Tables.Add(new cl_clienteDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["cl_cliente"]))));
                }
                if ((ds.Tables["co_contador"] != null)) {
                    base.Tables.Add(new co_contadorDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["co_contador"]))));
                }
                if ((ds.Tables["tb_parametros"] != null)) {
                    base.Tables.Add(new tb_parametrosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["tb_parametros"]))));
                }
                if ((ds.Tables["Table"] != null)) {
                    base.Tables.Add(new TableDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["Table"]))));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(System.Data.SchemaSerializationMode.IncludeSchema)]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public an_analistaDataTable an_analista {
            get {
                return this.tablean_analista;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ch_categoriaDataTable ch_categoria {
            get {
                return this.tablech_categoria;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ch_chamadoDataTable ch_chamado {
            get {
                return this.tablech_chamado;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ch_softwareDataTable ch_software {
            get {
                return this.tablech_software;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ch_telarotinaDataTable ch_telarotina {
            get {
                return this.tablech_telarotina;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public cl_clienteDataTable cl_cliente {
            get {
                return this.tablecl_cliente;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public co_contadorDataTable co_contador {
            get {
                return this.tableco_contador;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tb_parametrosDataTable tb_parametros {
            get {
                return this.tabletb_parametros;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.CategoryAttribute("Tables")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TableDataTable _Table {
            get {
                return this.table_Table;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new Devart.Data.MySql.MySqlConnection Connection {
            get {
                return base.Connection;
            }
            set {
                base.Connection = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public new string Prefix {
            get {
                return base.Prefix;
            }
            set {
                base.Prefix = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            LUA cln = ((LUA)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                Devart.Data.MySql.MySqlDataSet ds = new Devart.Data.MySql.MySqlDataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["an_analista"] != null)) {
                    base.Tables.Add(new an_analistaDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["an_analista"]))));
                }
                if ((ds.Tables["ch_categoria"] != null)) {
                    base.Tables.Add(new ch_categoriaDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["ch_categoria"]))));
                }
                if ((ds.Tables["ch_chamado"] != null)) {
                    base.Tables.Add(new ch_chamadoDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["ch_chamado"]))));
                }
                if ((ds.Tables["ch_software"] != null)) {
                    base.Tables.Add(new ch_softwareDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["ch_software"]))));
                }
                if ((ds.Tables["ch_telarotina"] != null)) {
                    base.Tables.Add(new ch_telarotinaDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["ch_telarotina"]))));
                }
                if ((ds.Tables["cl_cliente"] != null)) {
                    base.Tables.Add(new cl_clienteDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["cl_cliente"]))));
                }
                if ((ds.Tables["co_contador"] != null)) {
                    base.Tables.Add(new co_contadorDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["co_contador"]))));
                }
                if ((ds.Tables["tb_parametros"] != null)) {
                    base.Tables.Add(new tb_parametrosDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["tb_parametros"]))));
                }
                if ((ds.Tables["Table"] != null)) {
                    base.Tables.Add(new TableDataTable(((Devart.Data.MySql.MySqlDataTable)(ds.Tables["Table"]))));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablean_analista = ((an_analistaDataTable)(base.Tables["an_analista"]));
            if ((initTable == true)) {
                if ((this.tablean_analista != null)) {
                    this.tablean_analista.InitVars();
                }
            }
            this.tablech_categoria = ((ch_categoriaDataTable)(base.Tables["ch_categoria"]));
            if ((initTable == true)) {
                if ((this.tablech_categoria != null)) {
                    this.tablech_categoria.InitVars();
                }
            }
            this.tablech_chamado = ((ch_chamadoDataTable)(base.Tables["ch_chamado"]));
            if ((initTable == true)) {
                if ((this.tablech_chamado != null)) {
                    this.tablech_chamado.InitVars();
                }
            }
            this.tablech_software = ((ch_softwareDataTable)(base.Tables["ch_software"]));
            if ((initTable == true)) {
                if ((this.tablech_software != null)) {
                    this.tablech_software.InitVars();
                }
            }
            this.tablech_telarotina = ((ch_telarotinaDataTable)(base.Tables["ch_telarotina"]));
            if ((initTable == true)) {
                if ((this.tablech_telarotina != null)) {
                    this.tablech_telarotina.InitVars();
                }
            }
            this.tablecl_cliente = ((cl_clienteDataTable)(base.Tables["cl_cliente"]));
            if ((initTable == true)) {
                if ((this.tablecl_cliente != null)) {
                    this.tablecl_cliente.InitVars();
                }
            }
            this.tableco_contador = ((co_contadorDataTable)(base.Tables["co_contador"]));
            if ((initTable == true)) {
                if ((this.tableco_contador != null)) {
                    this.tableco_contador.InitVars();
                }
            }
            this.tabletb_parametros = ((tb_parametrosDataTable)(base.Tables["tb_parametros"]));
            if ((initTable == true)) {
                if ((this.tabletb_parametros != null)) {
                    this.tabletb_parametros.InitVars();
                }
            }
            this.table_Table = ((TableDataTable)(base.Tables["Table"]));
            if ((initTable == true)) {
                if ((this.table_Table != null)) {
                    this.table_Table.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "LUA";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablean_analista = new an_analistaDataTable(this.Connection);
            base.Tables.Add(this.tablean_analista);
            this.tablech_categoria = new ch_categoriaDataTable(this.Connection);
            base.Tables.Add(this.tablech_categoria);
            this.tablech_chamado = new ch_chamadoDataTable(this.Connection);
            base.Tables.Add(this.tablech_chamado);
            this.tablech_software = new ch_softwareDataTable(this.Connection);
            base.Tables.Add(this.tablech_software);
            this.tablech_telarotina = new ch_telarotinaDataTable(this.Connection);
            base.Tables.Add(this.tablech_telarotina);
            this.tablecl_cliente = new cl_clienteDataTable(this.Connection);
            base.Tables.Add(this.tablecl_cliente);
            this.tableco_contador = new co_contadorDataTable(this.Connection);
            base.Tables.Add(this.tableco_contador);
            this.tabletb_parametros = new tb_parametrosDataTable(this.Connection);
            base.Tables.Add(this.tabletb_parametros);
            this.table_Table = new TableDataTable(this.Connection);
            base.Tables.Add(this.table_Table);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            LUA ds = new LUA();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConnection() {
            return (this._shouldSerializeConnection 
                        || (this.Connection != null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrefix() {
            return false;
        }
        
        public delegate void an_analistaRowChangeEventHandler(object sender, an_analistaRowChangeEvent e);
        
        public delegate void ch_categoriaRowChangeEventHandler(object sender, ch_categoriaRowChangeEvent e);
        
        public delegate void ch_chamadoRowChangeEventHandler(object sender, ch_chamadoRowChangeEvent e);
        
        public delegate void ch_softwareRowChangeEventHandler(object sender, ch_softwareRowChangeEvent e);
        
        public delegate void ch_telarotinaRowChangeEventHandler(object sender, ch_telarotinaRowChangeEvent e);
        
        public delegate void cl_clienteRowChangeEventHandler(object sender, cl_clienteRowChangeEvent e);
        
        public delegate void co_contadorRowChangeEventHandler(object sender, co_contadorRowChangeEvent e);
        
        public delegate void tb_parametrosRowChangeEventHandler(object sender, tb_parametrosRowChangeEvent e);
        
        public delegate void TableRowChangeEventHandler(object sender, TableRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class an_analistaDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDANALISTA;
            
            private System.Data.DataColumn columnNOME;
            
            private System.Data.DataColumn columnUSUARIO;
            
            private System.Data.DataColumn columnSENHA;
            
            private System.Data.DataColumn columnCELCOMERCIAL;
            
            private System.Data.DataColumn columnATIVO;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public an_analistaDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public an_analistaDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "an_analista";
                this.Name = "an_analista";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal an_analistaDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected an_analistaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDANALISTAColumn {
                get {
                    return this.columnIDANALISTA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn NOMEColumn {
                get {
                    return this.columnNOME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn USUARIOColumn {
                get {
                    return this.columnUSUARIO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn SENHAColumn {
                get {
                    return this.columnSENHA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CELCOMERCIALColumn {
                get {
                    return this.columnCELCOMERCIAL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ATIVOColumn {
                get {
                    return this.columnATIVO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public an_analistaRow this[int index] {
                get {
                    return ((an_analistaRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event an_analistaRowChangeEventHandler an_analistaRowChanging;
            
            public event an_analistaRowChangeEventHandler an_analistaRowChanged;
            
            public event an_analistaRowChangeEventHandler an_analistaRowDeleting;
            
            public event an_analistaRowChangeEventHandler an_analistaRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addan_analistaRow(an_analistaRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public an_analistaRow Addan_analistaRow(int IDANALISTA, string NOME, string USUARIO, string SENHA, string CELCOMERCIAL, string ATIVO) {
                an_analistaRow rowan_analistaRow = ((an_analistaRow)(this.NewRow()));
                rowan_analistaRow.ItemArray = new object[] {
                        IDANALISTA,
                        NOME,
                        USUARIO,
                        SENHA,
                        CELCOMERCIAL,
                        ATIVO};
                this.Rows.Add(rowan_analistaRow);
                return rowan_analistaRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public an_analistaRow FindByIDANALISTA(int IDANALISTA) {
                return ((an_analistaRow)(this.Rows.Find(new object[] {
                            IDANALISTA})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                an_analistaDataTable cln = ((an_analistaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new an_analistaDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDANALISTA = base.Columns["IDANALISTA"];
                this.columnNOME = base.Columns["NOME"];
                this.columnUSUARIO = base.Columns["USUARIO"];
                this.columnSENHA = base.Columns["SENHA"];
                this.columnCELCOMERCIAL = base.Columns["CELCOMERCIAL"];
                this.columnATIVO = base.Columns["ATIVO"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDANALISTA = new System.Data.DataColumn("IDANALISTA", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDANALISTA);
                this.columnNOME = new System.Data.DataColumn("NOME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOME);
                this.columnUSUARIO = new System.Data.DataColumn("USUARIO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSUARIO);
                this.columnSENHA = new System.Data.DataColumn("SENHA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSENHA);
                this.columnCELCOMERCIAL = new System.Data.DataColumn("CELCOMERCIAL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCELCOMERCIAL);
                this.columnATIVO = new System.Data.DataColumn("ATIVO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnATIVO);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDANALISTA}, true));
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint2", new System.Data.DataColumn[] {
                                this.columnUSUARIO}, false));
                this.columnIDANALISTA.AllowDBNull = false;
                this.columnIDANALISTA.Unique = true;
                this.columnNOME.AllowDBNull = false;
                this.columnUSUARIO.AllowDBNull = false;
                this.columnUSUARIO.Unique = true;
                this.columnSENHA.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Port=3307;Database=lua;Persist Security" +
                            " Info=True;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from lua.an_analista", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `lua`.`an_analista` (`NOME`, `USUARIO`, `SENHA`, `CELCOMERCIAL`, `ATI" +
                        "VO`) VALUES (:NOME, :USUARIO, :SENHA, :CELCOMERCIAL, :ATIVO)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "USUARIO";
                param.Size = 0;
                param.SourceColumn = "USUARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "SENHA";
                param.Size = 0;
                param.SourceColumn = "SENHA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CELCOMERCIAL";
                param.Size = 0;
                param.SourceColumn = "CELCOMERCIAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `lua`.`an_analista` SET `NOME` = :NOME, `USUARIO` = :USUARIO, `SENHA` = :SENHA, `CELCOMERCIAL` = :CELCOMERCIAL, `ATIVO` = :ATIVO WHERE ((`IDANALISTA` = :Original_IDANALISTA) AND (`NOME` = :Original_NOME) AND (`USUARIO` = :Original_USUARIO) AND (`SENHA` = :Original_SENHA) AND ((:IsNull_CELCOMERCIAL = 1 AND `CELCOMERCIAL` IS NULL) OR (`CELCOMERCIAL` = :Original_CELCOMERCIAL)) AND ((:IsNull_ATIVO = 1 AND `ATIVO` IS NULL) OR (`ATIVO` = :Original_ATIVO)))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "USUARIO";
                param.Size = 0;
                param.SourceColumn = "USUARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "SENHA";
                param.Size = 0;
                param.SourceColumn = "SENHA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CELCOMERCIAL";
                param.Size = 0;
                param.SourceColumn = "CELCOMERCIAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDANALISTA";
                param.Size = 0;
                param.SourceColumn = "IDANALISTA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_USUARIO";
                param.Size = 0;
                param.SourceColumn = "USUARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_SENHA";
                param.Size = 0;
                param.SourceColumn = "SENHA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CELCOMERCIAL";
                param.Size = 0;
                param.SourceColumn = "CELCOMERCIAL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CELCOMERCIAL";
                param.Size = 0;
                param.SourceColumn = "CELCOMERCIAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand(@"DELETE FROM `lua`.`an_analista` WHERE ((`IDANALISTA` = :Original_IDANALISTA) AND (`NOME` = :Original_NOME) AND (`USUARIO` = :Original_USUARIO) AND (`SENHA` = :Original_SENHA) AND ((:IsNull_CELCOMERCIAL = 1 AND `CELCOMERCIAL` IS NULL) OR (`CELCOMERCIAL` = :Original_CELCOMERCIAL)) AND ((:IsNull_ATIVO = 1 AND `ATIVO` IS NULL) OR (`ATIVO` = :Original_ATIVO)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDANALISTA";
                param.Size = 0;
                param.SourceColumn = "IDANALISTA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NOME";
                param.Size = 0;
                param.SourceColumn = "NOME";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_USUARIO";
                param.Size = 0;
                param.SourceColumn = "USUARIO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_SENHA";
                param.Size = 0;
                param.SourceColumn = "SENHA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CELCOMERCIAL";
                param.Size = 0;
                param.SourceColumn = "CELCOMERCIAL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CELCOMERCIAL";
                param.Size = 0;
                param.SourceColumn = "CELCOMERCIAL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "an_analista";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDANALISTA", "IDANALISTA");
                this.TableMapping.ColumnMappings.Add("NOME", "NOME");
                this.TableMapping.ColumnMappings.Add("USUARIO", "USUARIO");
                this.TableMapping.ColumnMappings.Add("SENHA", "SENHA");
                this.TableMapping.ColumnMappings.Add("CELCOMERCIAL", "CELCOMERCIAL");
                this.TableMapping.ColumnMappings.Add("ATIVO", "ATIVO");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public an_analistaRow Newan_analistaRow() {
                return ((an_analistaRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new an_analistaRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(an_analistaRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.an_analistaRowChanged != null)) {
                    this.an_analistaRowChanged(this, new an_analistaRowChangeEvent(((an_analistaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.an_analistaRowChanging != null)) {
                    this.an_analistaRowChanging(this, new an_analistaRowChangeEvent(((an_analistaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.an_analistaRowDeleted != null)) {
                    this.an_analistaRowDeleted(this, new an_analistaRowChangeEvent(((an_analistaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.an_analistaRowDeleting != null)) {
                    this.an_analistaRowDeleting(this, new an_analistaRowChangeEvent(((an_analistaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removean_analistaRow(an_analistaRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LUA ds = new LUA();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "an_analistaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public partial class an_analistaRow : System.Data.DataRow {
            
            private an_analistaDataTable tablean_analista;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal an_analistaRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablean_analista = ((an_analistaDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDANALISTA {
                get {
                    return ((int)(this[this.tablean_analista.IDANALISTAColumn]));
                }
                set {
                    this[this.tablean_analista.IDANALISTAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOME {
                get {
                    return ((string)(this[this.tablean_analista.NOMEColumn]));
                }
                set {
                    this[this.tablean_analista.NOMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USUARIO {
                get {
                    return ((string)(this[this.tablean_analista.USUARIOColumn]));
                }
                set {
                    this[this.tablean_analista.USUARIOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SENHA {
                get {
                    return ((string)(this[this.tablean_analista.SENHAColumn]));
                }
                set {
                    this[this.tablean_analista.SENHAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CELCOMERCIAL {
                get {
                    try {
                        return ((string)(this[this.tablean_analista.CELCOMERCIALColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablean_analista.CELCOMERCIALColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ATIVO {
                get {
                    try {
                        return ((string)(this[this.tablean_analista.ATIVOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablean_analista.ATIVOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCELCOMERCIALNull() {
                return this.IsNull(this.tablean_analista.CELCOMERCIALColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCELCOMERCIALNull() {
                this[this.tablean_analista.CELCOMERCIALColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsATIVONull() {
                return this.IsNull(this.tablean_analista.ATIVOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetATIVONull() {
                this[this.tablean_analista.ATIVOColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public class an_analistaRowChangeEvent : System.EventArgs {
            
            private an_analistaRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public an_analistaRowChangeEvent(an_analistaRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public an_analistaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ch_categoriaDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDCATEGORIA;
            
            private System.Data.DataColumn columnCATEGORIA;
            
            private System.Data.DataColumn columnATIVO;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_categoriaDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_categoriaDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "ch_categoria";
                this.Name = "ch_categoria";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ch_categoriaDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ch_categoriaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDCATEGORIAColumn {
                get {
                    return this.columnIDCATEGORIA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CATEGORIAColumn {
                get {
                    return this.columnCATEGORIA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ATIVOColumn {
                get {
                    return this.columnATIVO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_categoriaRow this[int index] {
                get {
                    return ((ch_categoriaRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event ch_categoriaRowChangeEventHandler ch_categoriaRowChanging;
            
            public event ch_categoriaRowChangeEventHandler ch_categoriaRowChanged;
            
            public event ch_categoriaRowChangeEventHandler ch_categoriaRowDeleting;
            
            public event ch_categoriaRowChangeEventHandler ch_categoriaRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addch_categoriaRow(ch_categoriaRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_categoriaRow Addch_categoriaRow(int IDCATEGORIA, string CATEGORIA, string ATIVO) {
                ch_categoriaRow rowch_categoriaRow = ((ch_categoriaRow)(this.NewRow()));
                rowch_categoriaRow.ItemArray = new object[] {
                        IDCATEGORIA,
                        CATEGORIA,
                        ATIVO};
                this.Rows.Add(rowch_categoriaRow);
                return rowch_categoriaRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_categoriaRow FindByIDCATEGORIA(int IDCATEGORIA) {
                return ((ch_categoriaRow)(this.Rows.Find(new object[] {
                            IDCATEGORIA})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ch_categoriaDataTable cln = ((ch_categoriaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ch_categoriaDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDCATEGORIA = base.Columns["IDCATEGORIA"];
                this.columnCATEGORIA = base.Columns["CATEGORIA"];
                this.columnATIVO = base.Columns["ATIVO"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDCATEGORIA = new System.Data.DataColumn("IDCATEGORIA", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDCATEGORIA);
                this.columnCATEGORIA = new System.Data.DataColumn("CATEGORIA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORIA);
                this.columnATIVO = new System.Data.DataColumn("ATIVO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnATIVO);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDCATEGORIA}, true));
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint2", new System.Data.DataColumn[] {
                                this.columnCATEGORIA}, false));
                this.columnIDCATEGORIA.AllowDBNull = false;
                this.columnIDCATEGORIA.Unique = true;
                this.columnCATEGORIA.AllowDBNull = false;
                this.columnCATEGORIA.Unique = true;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Port=3307;Database=lua;Persist Security" +
                            " Info=True;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from lua.ch_categoria", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `lua`.`ch_categoria` (`CATEGORIA`, `ATIVO`) VALUES (:CATEGORIA, :ATIV" +
                        "O)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "CATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand("UPDATE `lua`.`ch_categoria` SET `CATEGORIA` = :CATEGORIA, `ATIVO` = :ATIVO WHERE " +
                        "((`IDCATEGORIA` = :Original_IDCATEGORIA) AND (`CATEGORIA` = :Original_CATEGORIA)" +
                        " AND ((:IsNull_ATIVO = 1 AND `ATIVO` IS NULL) OR (`ATIVO` = :Original_ATIVO)))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "CATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCATEGORIA";
                param.Size = 0;
                param.SourceColumn = "IDCATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "CATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `lua`.`ch_categoria` WHERE ((`IDCATEGORIA` = :Original_IDCATEGORIA) A" +
                        "ND (`CATEGORIA` = :Original_CATEGORIA) AND ((:IsNull_ATIVO = 1 AND `ATIVO` IS NU" +
                        "LL) OR (`ATIVO` = :Original_ATIVO)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCATEGORIA";
                param.Size = 0;
                param.SourceColumn = "IDCATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "CATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "ch_categoria";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDCATEGORIA", "IDCATEGORIA");
                this.TableMapping.ColumnMappings.Add("CATEGORIA", "CATEGORIA");
                this.TableMapping.ColumnMappings.Add("ATIVO", "ATIVO");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_categoriaRow Newch_categoriaRow() {
                return ((ch_categoriaRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ch_categoriaRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ch_categoriaRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ch_categoriaRowChanged != null)) {
                    this.ch_categoriaRowChanged(this, new ch_categoriaRowChangeEvent(((ch_categoriaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ch_categoriaRowChanging != null)) {
                    this.ch_categoriaRowChanging(this, new ch_categoriaRowChangeEvent(((ch_categoriaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ch_categoriaRowDeleted != null)) {
                    this.ch_categoriaRowDeleted(this, new ch_categoriaRowChangeEvent(((ch_categoriaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ch_categoriaRowDeleting != null)) {
                    this.ch_categoriaRowDeleting(this, new ch_categoriaRowChangeEvent(((ch_categoriaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removech_categoriaRow(ch_categoriaRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LUA ds = new LUA();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ch_categoriaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public partial class ch_categoriaRow : System.Data.DataRow {
            
            private ch_categoriaDataTable tablech_categoria;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ch_categoriaRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablech_categoria = ((ch_categoriaDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDCATEGORIA {
                get {
                    return ((int)(this[this.tablech_categoria.IDCATEGORIAColumn]));
                }
                set {
                    this[this.tablech_categoria.IDCATEGORIAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORIA {
                get {
                    return ((string)(this[this.tablech_categoria.CATEGORIAColumn]));
                }
                set {
                    this[this.tablech_categoria.CATEGORIAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ATIVO {
                get {
                    try {
                        return ((string)(this[this.tablech_categoria.ATIVOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_categoria.ATIVOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsATIVONull() {
                return this.IsNull(this.tablech_categoria.ATIVOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetATIVONull() {
                this[this.tablech_categoria.ATIVOColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public class ch_categoriaRowChangeEvent : System.EventArgs {
            
            private ch_categoriaRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_categoriaRowChangeEvent(ch_categoriaRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_categoriaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ch_chamadoDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDCHAMADO;
            
            private System.Data.DataColumn columnID_ANALISTA_ABERTURA;
            
            private System.Data.DataColumn columnANALISTAABERTURA;
            
            private System.Data.DataColumn columnID_ANALISTA_ANDAMENTO;
            
            private System.Data.DataColumn columnANALISTAANDAMENTO;
            
            private System.Data.DataColumn columnID_ANALISTA_FINALIZADO;
            
            private System.Data.DataColumn columnANALISTAFINALIZADO;
            
            private System.Data.DataColumn columnID_SOFTWARE;
            
            private System.Data.DataColumn columnSOFTWARE;
            
            private System.Data.DataColumn columnPRIORIDADE;
            
            private System.Data.DataColumn columnID_CLIENTE;
            
            private System.Data.DataColumn columnFANTASIACLIENTE;
            
            private System.Data.DataColumn columnID_TELAROTINA;
            
            private System.Data.DataColumn columnTELAROTINA;
            
            private System.Data.DataColumn columnAMBIENTE;
            
            private System.Data.DataColumn columnID_CATEGORIA;
            
            private System.Data.DataColumn columnCATEGORIA;
            
            private System.Data.DataColumn columnASSUNTO;
            
            private System.Data.DataColumn columnCONTATO;
            
            private System.Data.DataColumn columnTEL1;
            
            private System.Data.DataColumn columnSTATUS;
            
            private System.Data.DataColumn columnDETALHES;
            
            private System.Data.DataColumn columnPARECER;
            
            private System.Data.DataColumn columnDATAABERTURA;
            
            private System.Data.DataColumn columnDATAANDAMENTO;
            
            private System.Data.DataColumn columnDATAFINALIZADO;
            
            private System.Data.DataColumn columnSOL;
            
            private System.Data.DataColumn columnIDSOL;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_chamadoDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_chamadoDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "ch_chamado";
                this.Name = "ch_chamado";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ch_chamadoDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ch_chamadoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDCHAMADOColumn {
                get {
                    return this.columnIDCHAMADO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ID_ANALISTA_ABERTURAColumn {
                get {
                    return this.columnID_ANALISTA_ABERTURA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ANALISTAABERTURAColumn {
                get {
                    return this.columnANALISTAABERTURA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ID_ANALISTA_ANDAMENTOColumn {
                get {
                    return this.columnID_ANALISTA_ANDAMENTO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ANALISTAANDAMENTOColumn {
                get {
                    return this.columnANALISTAANDAMENTO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ID_ANALISTA_FINALIZADOColumn {
                get {
                    return this.columnID_ANALISTA_FINALIZADO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ANALISTAFINALIZADOColumn {
                get {
                    return this.columnANALISTAFINALIZADO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ID_SOFTWAREColumn {
                get {
                    return this.columnID_SOFTWARE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn SOFTWAREColumn {
                get {
                    return this.columnSOFTWARE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn PRIORIDADEColumn {
                get {
                    return this.columnPRIORIDADE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ID_CLIENTEColumn {
                get {
                    return this.columnID_CLIENTE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn FANTASIACLIENTEColumn {
                get {
                    return this.columnFANTASIACLIENTE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ID_TELAROTINAColumn {
                get {
                    return this.columnID_TELAROTINA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TELAROTINAColumn {
                get {
                    return this.columnTELAROTINA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn AMBIENTEColumn {
                get {
                    return this.columnAMBIENTE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ID_CATEGORIAColumn {
                get {
                    return this.columnID_CATEGORIA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CATEGORIAColumn {
                get {
                    return this.columnCATEGORIA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ASSUNTOColumn {
                get {
                    return this.columnASSUNTO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CONTATOColumn {
                get {
                    return this.columnCONTATO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TEL1Column {
                get {
                    return this.columnTEL1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DETALHESColumn {
                get {
                    return this.columnDETALHES;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn PARECERColumn {
                get {
                    return this.columnPARECER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DATAABERTURAColumn {
                get {
                    return this.columnDATAABERTURA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DATAANDAMENTOColumn {
                get {
                    return this.columnDATAANDAMENTO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DATAFINALIZADOColumn {
                get {
                    return this.columnDATAFINALIZADO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn SOLColumn {
                get {
                    return this.columnSOL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDSOLColumn {
                get {
                    return this.columnIDSOL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_chamadoRow this[int index] {
                get {
                    return ((ch_chamadoRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event ch_chamadoRowChangeEventHandler ch_chamadoRowChanging;
            
            public event ch_chamadoRowChangeEventHandler ch_chamadoRowChanged;
            
            public event ch_chamadoRowChangeEventHandler ch_chamadoRowDeleting;
            
            public event ch_chamadoRowChangeEventHandler ch_chamadoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addch_chamadoRow(ch_chamadoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_chamadoRow Addch_chamadoRow(
                        int IDCHAMADO, 
                        int ID_ANALISTA_ABERTURA, 
                        string ANALISTAABERTURA, 
                        int ID_ANALISTA_ANDAMENTO, 
                        string ANALISTAANDAMENTO, 
                        int ID_ANALISTA_FINALIZADO, 
                        string ANALISTAFINALIZADO, 
                        int ID_SOFTWARE, 
                        string SOFTWARE, 
                        string PRIORIDADE, 
                        int ID_CLIENTE, 
                        string FANTASIACLIENTE, 
                        int ID_TELAROTINA, 
                        string TELAROTINA, 
                        string AMBIENTE, 
                        int ID_CATEGORIA, 
                        string CATEGORIA, 
                        string ASSUNTO, 
                        string CONTATO, 
                        string TEL1, 
                        string STATUS, 
                        string DETALHES, 
                        string PARECER, 
                        System.DateTime DATAABERTURA, 
                        System.DateTime DATAANDAMENTO, 
                        System.DateTime DATAFINALIZADO, 
                        string SOL, 
                        string IDSOL) {
                ch_chamadoRow rowch_chamadoRow = ((ch_chamadoRow)(this.NewRow()));
                rowch_chamadoRow.ItemArray = new object[] {
                        IDCHAMADO,
                        ID_ANALISTA_ABERTURA,
                        ANALISTAABERTURA,
                        ID_ANALISTA_ANDAMENTO,
                        ANALISTAANDAMENTO,
                        ID_ANALISTA_FINALIZADO,
                        ANALISTAFINALIZADO,
                        ID_SOFTWARE,
                        SOFTWARE,
                        PRIORIDADE,
                        ID_CLIENTE,
                        FANTASIACLIENTE,
                        ID_TELAROTINA,
                        TELAROTINA,
                        AMBIENTE,
                        ID_CATEGORIA,
                        CATEGORIA,
                        ASSUNTO,
                        CONTATO,
                        TEL1,
                        STATUS,
                        DETALHES,
                        PARECER,
                        DATAABERTURA,
                        DATAANDAMENTO,
                        DATAFINALIZADO,
                        SOL,
                        IDSOL};
                this.Rows.Add(rowch_chamadoRow);
                return rowch_chamadoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_chamadoRow FindByIDCHAMADO(int IDCHAMADO) {
                return ((ch_chamadoRow)(this.Rows.Find(new object[] {
                            IDCHAMADO})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ch_chamadoDataTable cln = ((ch_chamadoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ch_chamadoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDCHAMADO = base.Columns["IDCHAMADO"];
                this.columnID_ANALISTA_ABERTURA = base.Columns["ID_ANALISTA_ABERTURA"];
                this.columnANALISTAABERTURA = base.Columns["ANALISTAABERTURA"];
                this.columnID_ANALISTA_ANDAMENTO = base.Columns["ID_ANALISTA_ANDAMENTO"];
                this.columnANALISTAANDAMENTO = base.Columns["ANALISTAANDAMENTO"];
                this.columnID_ANALISTA_FINALIZADO = base.Columns["ID_ANALISTA_FINALIZADO"];
                this.columnANALISTAFINALIZADO = base.Columns["ANALISTAFINALIZADO"];
                this.columnID_SOFTWARE = base.Columns["ID_SOFTWARE"];
                this.columnSOFTWARE = base.Columns["SOFTWARE"];
                this.columnPRIORIDADE = base.Columns["PRIORIDADE"];
                this.columnID_CLIENTE = base.Columns["ID_CLIENTE"];
                this.columnFANTASIACLIENTE = base.Columns["FANTASIACLIENTE"];
                this.columnID_TELAROTINA = base.Columns["ID_TELAROTINA"];
                this.columnTELAROTINA = base.Columns["TELAROTINA"];
                this.columnAMBIENTE = base.Columns["AMBIENTE"];
                this.columnID_CATEGORIA = base.Columns["ID_CATEGORIA"];
                this.columnCATEGORIA = base.Columns["CATEGORIA"];
                this.columnASSUNTO = base.Columns["ASSUNTO"];
                this.columnCONTATO = base.Columns["CONTATO"];
                this.columnTEL1 = base.Columns["TEL1"];
                this.columnSTATUS = base.Columns["STATUS"];
                this.columnDETALHES = base.Columns["DETALHES"];
                this.columnPARECER = base.Columns["PARECER"];
                this.columnDATAABERTURA = base.Columns["DATAABERTURA"];
                this.columnDATAANDAMENTO = base.Columns["DATAANDAMENTO"];
                this.columnDATAFINALIZADO = base.Columns["DATAFINALIZADO"];
                this.columnSOL = base.Columns["SOL"];
                this.columnIDSOL = base.Columns["IDSOL"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDCHAMADO = new System.Data.DataColumn("IDCHAMADO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDCHAMADO);
                this.columnID_ANALISTA_ABERTURA = new System.Data.DataColumn("ID_ANALISTA_ABERTURA", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_ANALISTA_ABERTURA);
                this.columnANALISTAABERTURA = new System.Data.DataColumn("ANALISTAABERTURA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnANALISTAABERTURA);
                this.columnID_ANALISTA_ANDAMENTO = new System.Data.DataColumn("ID_ANALISTA_ANDAMENTO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_ANALISTA_ANDAMENTO);
                this.columnANALISTAANDAMENTO = new System.Data.DataColumn("ANALISTAANDAMENTO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnANALISTAANDAMENTO);
                this.columnID_ANALISTA_FINALIZADO = new System.Data.DataColumn("ID_ANALISTA_FINALIZADO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_ANALISTA_FINALIZADO);
                this.columnANALISTAFINALIZADO = new System.Data.DataColumn("ANALISTAFINALIZADO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnANALISTAFINALIZADO);
                this.columnID_SOFTWARE = new System.Data.DataColumn("ID_SOFTWARE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_SOFTWARE);
                this.columnSOFTWARE = new System.Data.DataColumn("SOFTWARE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOFTWARE);
                this.columnPRIORIDADE = new System.Data.DataColumn("PRIORIDADE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRIORIDADE);
                this.columnID_CLIENTE = new System.Data.DataColumn("ID_CLIENTE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_CLIENTE);
                this.columnFANTASIACLIENTE = new System.Data.DataColumn("FANTASIACLIENTE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFANTASIACLIENTE);
                this.columnID_TELAROTINA = new System.Data.DataColumn("ID_TELAROTINA", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_TELAROTINA);
                this.columnTELAROTINA = new System.Data.DataColumn("TELAROTINA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTELAROTINA);
                this.columnAMBIENTE = new System.Data.DataColumn("AMBIENTE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMBIENTE);
                this.columnID_CATEGORIA = new System.Data.DataColumn("ID_CATEGORIA", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_CATEGORIA);
                this.columnCATEGORIA = new System.Data.DataColumn("CATEGORIA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORIA);
                this.columnASSUNTO = new System.Data.DataColumn("ASSUNTO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnASSUNTO);
                this.columnCONTATO = new System.Data.DataColumn("CONTATO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTATO);
                this.columnTEL1 = new System.Data.DataColumn("TEL1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEL1);
                this.columnSTATUS = new System.Data.DataColumn("STATUS", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.columnDETALHES = new System.Data.DataColumn("DETALHES", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDETALHES);
                this.columnPARECER = new System.Data.DataColumn("PARECER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARECER);
                this.columnDATAABERTURA = new System.Data.DataColumn("DATAABERTURA", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATAABERTURA);
                this.columnDATAANDAMENTO = new System.Data.DataColumn("DATAANDAMENTO", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATAANDAMENTO);
                this.columnDATAFINALIZADO = new System.Data.DataColumn("DATAFINALIZADO", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATAFINALIZADO);
                this.columnSOL = new System.Data.DataColumn("SOL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOL);
                this.columnIDSOL = new System.Data.DataColumn("IDSOL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDSOL);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDCHAMADO}, true));
                this.columnIDCHAMADO.AllowDBNull = false;
                this.columnIDCHAMADO.Unique = true;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Port=3307;Database=lua;Persist Security" +
                            " Info=True;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from lua.ch_chamado", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand(@"INSERT INTO `lua`.`ch_chamado` (`ID_ANALISTA_ABERTURA`, `ANALISTAABERTURA`, `ID_ANALISTA_ANDAMENTO`, `ANALISTAANDAMENTO`, `ID_ANALISTA_FINALIZADO`, `ANALISTAFINALIZADO`, `ID_SOFTWARE`, `SOFTWARE`, `PRIORIDADE`, `ID_CLIENTE`, `FANTASIACLIENTE`, `ID_TELAROTINA`, `TELAROTINA`, `AMBIENTE`, `ID_CATEGORIA`, `CATEGORIA`, `ASSUNTO`, `CONTATO`, `TEL1`, `STATUS`, `DETALHES`, `PARECER`, `DATAABERTURA`, `DATAANDAMENTO`, `DATAFINALIZADO`, `SOL`, `IDSOL`) VALUES (:ID_ANALISTA_ABERTURA, :ANALISTAABERTURA, :ID_ANALISTA_ANDAMENTO, :ANALISTAANDAMENTO, :ID_ANALISTA_FINALIZADO, :ANALISTAFINALIZADO, :ID_SOFTWARE, :SOFTWARE, :PRIORIDADE, :ID_CLIENTE, :FANTASIACLIENTE, :ID_TELAROTINA, :TELAROTINA, :AMBIENTE, :ID_CATEGORIA, :CATEGORIA, :ASSUNTO, :CONTATO, :TEL1, :STATUS, :DETALHES, :PARECER, :DATAABERTURA, :DATAANDAMENTO, :DATAFINALIZADO, :SOL, :IDSOL)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID_ANALISTA_ABERTURA";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_ABERTURA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ANALISTAABERTURA";
                param.Size = 0;
                param.SourceColumn = "ANALISTAABERTURA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID_ANALISTA_ANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_ANDAMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ANALISTAANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "ANALISTAANDAMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID_ANALISTA_FINALIZADO";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_FINALIZADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ANALISTAFINALIZADO";
                param.Size = 0;
                param.SourceColumn = "ANALISTAFINALIZADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID_SOFTWARE";
                param.Size = 0;
                param.SourceColumn = "ID_SOFTWARE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "SOFTWARE";
                param.Size = 0;
                param.SourceColumn = "SOFTWARE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PRIORIDADE";
                param.Size = 0;
                param.SourceColumn = "PRIORIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "ID_CLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "FANTASIACLIENTE";
                param.Size = 0;
                param.SourceColumn = "FANTASIACLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID_TELAROTINA";
                param.Size = 0;
                param.SourceColumn = "ID_TELAROTINA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TELAROTINA";
                param.Size = 0;
                param.SourceColumn = "TELAROTINA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "AMBIENTE";
                param.Size = 0;
                param.SourceColumn = "AMBIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID_CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "ID_CATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "CATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ASSUNTO";
                param.Size = 0;
                param.SourceColumn = "ASSUNTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTATO";
                param.Size = 0;
                param.SourceColumn = "CONTATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "STATUS";
                param.Size = 0;
                param.SourceColumn = "STATUS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DETALHES";
                param.Size = 0;
                param.SourceColumn = "DETALHES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PARECER";
                param.Size = 0;
                param.SourceColumn = "PARECER";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DATAABERTURA";
                param.Size = 0;
                param.SourceColumn = "DATAABERTURA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DATAANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "DATAANDAMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DATAFINALIZADO";
                param.Size = 0;
                param.SourceColumn = "DATAFINALIZADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "SOL";
                param.Size = 0;
                param.SourceColumn = "SOL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IDSOL";
                param.Size = 0;
                param.SourceColumn = "IDSOL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand("UPDATE `lua`.`ch_chamado` SET `ID_ANALISTA_ABERTURA` = :ID_ANALISTA_ABERTURA, `AN" +
                        "ALISTAABERTURA` = :ANALISTAABERTURA, `ID_ANALISTA_ANDAMENTO` = :ID_ANALISTA_ANDA" +
                        "MENTO, `ANALISTAANDAMENTO` = :ANALISTAANDAMENTO, `ID_ANALISTA_FINALIZADO` = :ID_" +
                        "ANALISTA_FINALIZADO, `ANALISTAFINALIZADO` = :ANALISTAFINALIZADO, `ID_SOFTWARE` =" +
                        " :ID_SOFTWARE, `SOFTWARE` = :SOFTWARE, `PRIORIDADE` = :PRIORIDADE, `ID_CLIENTE` " +
                        "= :ID_CLIENTE, `FANTASIACLIENTE` = :FANTASIACLIENTE, `ID_TELAROTINA` = :ID_TELAR" +
                        "OTINA, `TELAROTINA` = :TELAROTINA, `AMBIENTE` = :AMBIENTE, `ID_CATEGORIA` = :ID_" +
                        "CATEGORIA, `CATEGORIA` = :CATEGORIA, `ASSUNTO` = :ASSUNTO, `CONTATO` = :CONTATO," +
                        " `TEL1` = :TEL1, `STATUS` = :STATUS, `DETALHES` = :DETALHES, `PARECER` = :PARECE" +
                        "R, `DATAABERTURA` = :DATAABERTURA, `DATAANDAMENTO` = :DATAANDAMENTO, `DATAFINALI" +
                        "ZADO` = :DATAFINALIZADO, `SOL` = :SOL, `IDSOL` = :IDSOL WHERE ((`IDCHAMADO` = :O" +
                        "riginal_IDCHAMADO) AND ((:IsNull_ID_ANALISTA_ABERTURA = 1 AND `ID_ANALISTA_ABERT" +
                        "URA` IS NULL) OR (`ID_ANALISTA_ABERTURA` = :Original_ID_ANALISTA_ABERTURA)) AND " +
                        "((:IsNull_ANALISTAABERTURA = 1 AND `ANALISTAABERTURA` IS NULL) OR (`ANALISTAABER" +
                        "TURA` = :Original_ANALISTAABERTURA)) AND ((:IsNull_ID_ANALISTA_ANDAMENTO = 1 AND" +
                        " `ID_ANALISTA_ANDAMENTO` IS NULL) OR (`ID_ANALISTA_ANDAMENTO` = :Original_ID_ANA" +
                        "LISTA_ANDAMENTO)) AND ((:IsNull_ANALISTAANDAMENTO = 1 AND `ANALISTAANDAMENTO` IS" +
                        " NULL) OR (`ANALISTAANDAMENTO` = :Original_ANALISTAANDAMENTO)) AND ((:IsNull_ID_" +
                        "ANALISTA_FINALIZADO = 1 AND `ID_ANALISTA_FINALIZADO` IS NULL) OR (`ID_ANALISTA_F" +
                        "INALIZADO` = :Original_ID_ANALISTA_FINALIZADO)) AND ((:IsNull_ANALISTAFINALIZADO" +
                        " = 1 AND `ANALISTAFINALIZADO` IS NULL) OR (`ANALISTAFINALIZADO` = :Original_ANAL" +
                        "ISTAFINALIZADO)) AND ((:IsNull_ID_SOFTWARE = 1 AND `ID_SOFTWARE` IS NULL) OR (`I" +
                        "D_SOFTWARE` = :Original_ID_SOFTWARE)) AND ((:IsNull_SOFTWARE = 1 AND `SOFTWARE` " +
                        "IS NULL) OR (`SOFTWARE` = :Original_SOFTWARE)) AND ((:IsNull_PRIORIDADE = 1 AND " +
                        "`PRIORIDADE` IS NULL) OR (`PRIORIDADE` = :Original_PRIORIDADE)) AND ((:IsNull_ID" +
                        "_CLIENTE = 1 AND `ID_CLIENTE` IS NULL) OR (`ID_CLIENTE` = :Original_ID_CLIENTE))" +
                        " AND ((:IsNull_FANTASIACLIENTE = 1 AND `FANTASIACLIENTE` IS NULL) OR (`FANTASIAC" +
                        "LIENTE` = :Original_FANTASIACLIENTE)) AND ((:IsNull_ID_TELAROTINA = 1 AND `ID_TE" +
                        "LAROTINA` IS NULL) OR (`ID_TELAROTINA` = :Original_ID_TELAROTINA)) AND ((:IsNull" +
                        "_TELAROTINA = 1 AND `TELAROTINA` IS NULL) OR (`TELAROTINA` = :Original_TELAROTIN" +
                        "A)) AND ((:IsNull_AMBIENTE = 1 AND `AMBIENTE` IS NULL) OR (`AMBIENTE` = :Origina" +
                        "l_AMBIENTE)) AND ((:IsNull_ID_CATEGORIA = 1 AND `ID_CATEGORIA` IS NULL) OR (`ID_" +
                        "CATEGORIA` = :Original_ID_CATEGORIA)) AND ((:IsNull_CATEGORIA = 1 AND `CATEGORIA" +
                        "` IS NULL) OR (`CATEGORIA` = :Original_CATEGORIA)) AND ((:IsNull_ASSUNTO = 1 AND" +
                        " `ASSUNTO` IS NULL) OR (`ASSUNTO` = :Original_ASSUNTO)) AND ((:IsNull_CONTATO = " +
                        "1 AND `CONTATO` IS NULL) OR (`CONTATO` = :Original_CONTATO)) AND ((:IsNull_TEL1 " +
                        "= 1 AND `TEL1` IS NULL) OR (`TEL1` = :Original_TEL1)) AND ((:IsNull_STATUS = 1 A" +
                        "ND `STATUS` IS NULL) OR (`STATUS` = :Original_STATUS)) AND ((:IsNull_DATAABERTUR" +
                        "A = 1 AND `DATAABERTURA` IS NULL) OR (`DATAABERTURA` = :Original_DATAABERTURA)) " +
                        "AND ((:IsNull_DATAANDAMENTO = 1 AND `DATAANDAMENTO` IS NULL) OR (`DATAANDAMENTO`" +
                        " = :Original_DATAANDAMENTO)) AND ((:IsNull_DATAFINALIZADO = 1 AND `DATAFINALIZAD" +
                        "O` IS NULL) OR (`DATAFINALIZADO` = :Original_DATAFINALIZADO)) AND ((:IsNull_SOL " +
                        "= 1 AND `SOL` IS NULL) OR (`SOL` = :Original_SOL)) AND ((:IsNull_IDSOL = 1 AND `" +
                        "IDSOL` IS NULL) OR (`IDSOL` = :Original_IDSOL)))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID_ANALISTA_ABERTURA";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_ABERTURA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ANALISTAABERTURA";
                param.Size = 0;
                param.SourceColumn = "ANALISTAABERTURA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID_ANALISTA_ANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_ANDAMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ANALISTAANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "ANALISTAANDAMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID_ANALISTA_FINALIZADO";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_FINALIZADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ANALISTAFINALIZADO";
                param.Size = 0;
                param.SourceColumn = "ANALISTAFINALIZADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID_SOFTWARE";
                param.Size = 0;
                param.SourceColumn = "ID_SOFTWARE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "SOFTWARE";
                param.Size = 0;
                param.SourceColumn = "SOFTWARE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PRIORIDADE";
                param.Size = 0;
                param.SourceColumn = "PRIORIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "ID_CLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "FANTASIACLIENTE";
                param.Size = 0;
                param.SourceColumn = "FANTASIACLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID_TELAROTINA";
                param.Size = 0;
                param.SourceColumn = "ID_TELAROTINA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TELAROTINA";
                param.Size = 0;
                param.SourceColumn = "TELAROTINA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "AMBIENTE";
                param.Size = 0;
                param.SourceColumn = "AMBIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID_CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "ID_CATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "CATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ASSUNTO";
                param.Size = 0;
                param.SourceColumn = "ASSUNTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTATO";
                param.Size = 0;
                param.SourceColumn = "CONTATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "STATUS";
                param.Size = 0;
                param.SourceColumn = "STATUS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DETALHES";
                param.Size = 0;
                param.SourceColumn = "DETALHES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PARECER";
                param.Size = 0;
                param.SourceColumn = "PARECER";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DATAABERTURA";
                param.Size = 0;
                param.SourceColumn = "DATAABERTURA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DATAANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "DATAANDAMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DATAFINALIZADO";
                param.Size = 0;
                param.SourceColumn = "DATAFINALIZADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "SOL";
                param.Size = 0;
                param.SourceColumn = "SOL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IDSOL";
                param.Size = 0;
                param.SourceColumn = "IDSOL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCHAMADO";
                param.Size = 0;
                param.SourceColumn = "IDCHAMADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ID_ANALISTA_ABERTURA";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_ABERTURA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID_ANALISTA_ABERTURA";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_ABERTURA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ANALISTAABERTURA";
                param.Size = 0;
                param.SourceColumn = "ANALISTAABERTURA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ANALISTAABERTURA";
                param.Size = 0;
                param.SourceColumn = "ANALISTAABERTURA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ID_ANALISTA_ANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_ANDAMENTO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID_ANALISTA_ANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_ANDAMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ANALISTAANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "ANALISTAANDAMENTO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ANALISTAANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "ANALISTAANDAMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ID_ANALISTA_FINALIZADO";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_FINALIZADO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID_ANALISTA_FINALIZADO";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_FINALIZADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ANALISTAFINALIZADO";
                param.Size = 0;
                param.SourceColumn = "ANALISTAFINALIZADO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ANALISTAFINALIZADO";
                param.Size = 0;
                param.SourceColumn = "ANALISTAFINALIZADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ID_SOFTWARE";
                param.Size = 0;
                param.SourceColumn = "ID_SOFTWARE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID_SOFTWARE";
                param.Size = 0;
                param.SourceColumn = "ID_SOFTWARE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_SOFTWARE";
                param.Size = 0;
                param.SourceColumn = "SOFTWARE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_SOFTWARE";
                param.Size = 0;
                param.SourceColumn = "SOFTWARE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_PRIORIDADE";
                param.Size = 0;
                param.SourceColumn = "PRIORIDADE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_PRIORIDADE";
                param.Size = 0;
                param.SourceColumn = "PRIORIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ID_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "ID_CLIENTE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "ID_CLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_FANTASIACLIENTE";
                param.Size = 0;
                param.SourceColumn = "FANTASIACLIENTE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_FANTASIACLIENTE";
                param.Size = 0;
                param.SourceColumn = "FANTASIACLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ID_TELAROTINA";
                param.Size = 0;
                param.SourceColumn = "ID_TELAROTINA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID_TELAROTINA";
                param.Size = 0;
                param.SourceColumn = "ID_TELAROTINA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TELAROTINA";
                param.Size = 0;
                param.SourceColumn = "TELAROTINA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TELAROTINA";
                param.Size = 0;
                param.SourceColumn = "TELAROTINA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_AMBIENTE";
                param.Size = 0;
                param.SourceColumn = "AMBIENTE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_AMBIENTE";
                param.Size = 0;
                param.SourceColumn = "AMBIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ID_CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "ID_CATEGORIA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID_CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "ID_CATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "CATEGORIA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "CATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ASSUNTO";
                param.Size = 0;
                param.SourceColumn = "ASSUNTO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ASSUNTO";
                param.Size = 0;
                param.SourceColumn = "ASSUNTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CONTATO";
                param.Size = 0;
                param.SourceColumn = "CONTATO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTATO";
                param.Size = 0;
                param.SourceColumn = "CONTATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_STATUS";
                param.Size = 0;
                param.SourceColumn = "STATUS";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_STATUS";
                param.Size = 0;
                param.SourceColumn = "STATUS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DATAABERTURA";
                param.Size = 0;
                param.SourceColumn = "DATAABERTURA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DATAABERTURA";
                param.Size = 0;
                param.SourceColumn = "DATAABERTURA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DATAANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "DATAANDAMENTO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DATAANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "DATAANDAMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DATAFINALIZADO";
                param.Size = 0;
                param.SourceColumn = "DATAFINALIZADO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DATAFINALIZADO";
                param.Size = 0;
                param.SourceColumn = "DATAFINALIZADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_SOL";
                param.Size = 0;
                param.SourceColumn = "SOL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_SOL";
                param.Size = 0;
                param.SourceColumn = "SOL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_IDSOL";
                param.Size = 0;
                param.SourceColumn = "IDSOL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDSOL";
                param.Size = 0;
                param.SourceColumn = "IDSOL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `lua`.`ch_chamado` WHERE ((`IDCHAMADO` = :Original_IDCHAMADO) AND ((:" +
                        "IsNull_ID_ANALISTA_ABERTURA = 1 AND `ID_ANALISTA_ABERTURA` IS NULL) OR (`ID_ANAL" +
                        "ISTA_ABERTURA` = :Original_ID_ANALISTA_ABERTURA)) AND ((:IsNull_ANALISTAABERTURA" +
                        " = 1 AND `ANALISTAABERTURA` IS NULL) OR (`ANALISTAABERTURA` = :Original_ANALISTA" +
                        "ABERTURA)) AND ((:IsNull_ID_ANALISTA_ANDAMENTO = 1 AND `ID_ANALISTA_ANDAMENTO` I" +
                        "S NULL) OR (`ID_ANALISTA_ANDAMENTO` = :Original_ID_ANALISTA_ANDAMENTO)) AND ((:I" +
                        "sNull_ANALISTAANDAMENTO = 1 AND `ANALISTAANDAMENTO` IS NULL) OR (`ANALISTAANDAME" +
                        "NTO` = :Original_ANALISTAANDAMENTO)) AND ((:IsNull_ID_ANALISTA_FINALIZADO = 1 AN" +
                        "D `ID_ANALISTA_FINALIZADO` IS NULL) OR (`ID_ANALISTA_FINALIZADO` = :Original_ID_" +
                        "ANALISTA_FINALIZADO)) AND ((:IsNull_ANALISTAFINALIZADO = 1 AND `ANALISTAFINALIZA" +
                        "DO` IS NULL) OR (`ANALISTAFINALIZADO` = :Original_ANALISTAFINALIZADO)) AND ((:Is" +
                        "Null_ID_SOFTWARE = 1 AND `ID_SOFTWARE` IS NULL) OR (`ID_SOFTWARE` = :Original_ID" +
                        "_SOFTWARE)) AND ((:IsNull_SOFTWARE = 1 AND `SOFTWARE` IS NULL) OR (`SOFTWARE` = " +
                        ":Original_SOFTWARE)) AND ((:IsNull_PRIORIDADE = 1 AND `PRIORIDADE` IS NULL) OR (" +
                        "`PRIORIDADE` = :Original_PRIORIDADE)) AND ((:IsNull_ID_CLIENTE = 1 AND `ID_CLIEN" +
                        "TE` IS NULL) OR (`ID_CLIENTE` = :Original_ID_CLIENTE)) AND ((:IsNull_FANTASIACLI" +
                        "ENTE = 1 AND `FANTASIACLIENTE` IS NULL) OR (`FANTASIACLIENTE` = :Original_FANTAS" +
                        "IACLIENTE)) AND ((:IsNull_ID_TELAROTINA = 1 AND `ID_TELAROTINA` IS NULL) OR (`ID" +
                        "_TELAROTINA` = :Original_ID_TELAROTINA)) AND ((:IsNull_TELAROTINA = 1 AND `TELAR" +
                        "OTINA` IS NULL) OR (`TELAROTINA` = :Original_TELAROTINA)) AND ((:IsNull_AMBIENTE" +
                        " = 1 AND `AMBIENTE` IS NULL) OR (`AMBIENTE` = :Original_AMBIENTE)) AND ((:IsNull" +
                        "_ID_CATEGORIA = 1 AND `ID_CATEGORIA` IS NULL) OR (`ID_CATEGORIA` = :Original_ID_" +
                        "CATEGORIA)) AND ((:IsNull_CATEGORIA = 1 AND `CATEGORIA` IS NULL) OR (`CATEGORIA`" +
                        " = :Original_CATEGORIA)) AND ((:IsNull_ASSUNTO = 1 AND `ASSUNTO` IS NULL) OR (`A" +
                        "SSUNTO` = :Original_ASSUNTO)) AND ((:IsNull_CONTATO = 1 AND `CONTATO` IS NULL) O" +
                        "R (`CONTATO` = :Original_CONTATO)) AND ((:IsNull_TEL1 = 1 AND `TEL1` IS NULL) OR" +
                        " (`TEL1` = :Original_TEL1)) AND ((:IsNull_STATUS = 1 AND `STATUS` IS NULL) OR (`" +
                        "STATUS` = :Original_STATUS)) AND ((:IsNull_DATAABERTURA = 1 AND `DATAABERTURA` I" +
                        "S NULL) OR (`DATAABERTURA` = :Original_DATAABERTURA)) AND ((:IsNull_DATAANDAMENT" +
                        "O = 1 AND `DATAANDAMENTO` IS NULL) OR (`DATAANDAMENTO` = :Original_DATAANDAMENTO" +
                        ")) AND ((:IsNull_DATAFINALIZADO = 1 AND `DATAFINALIZADO` IS NULL) OR (`DATAFINAL" +
                        "IZADO` = :Original_DATAFINALIZADO)) AND ((:IsNull_SOL = 1 AND `SOL` IS NULL) OR " +
                        "(`SOL` = :Original_SOL)) AND ((:IsNull_IDSOL = 1 AND `IDSOL` IS NULL) OR (`IDSOL" +
                        "` = :Original_IDSOL)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCHAMADO";
                param.Size = 0;
                param.SourceColumn = "IDCHAMADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ID_ANALISTA_ABERTURA";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_ABERTURA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID_ANALISTA_ABERTURA";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_ABERTURA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ANALISTAABERTURA";
                param.Size = 0;
                param.SourceColumn = "ANALISTAABERTURA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ANALISTAABERTURA";
                param.Size = 0;
                param.SourceColumn = "ANALISTAABERTURA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ID_ANALISTA_ANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_ANDAMENTO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID_ANALISTA_ANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_ANDAMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ANALISTAANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "ANALISTAANDAMENTO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ANALISTAANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "ANALISTAANDAMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ID_ANALISTA_FINALIZADO";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_FINALIZADO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID_ANALISTA_FINALIZADO";
                param.Size = 0;
                param.SourceColumn = "ID_ANALISTA_FINALIZADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ANALISTAFINALIZADO";
                param.Size = 0;
                param.SourceColumn = "ANALISTAFINALIZADO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ANALISTAFINALIZADO";
                param.Size = 0;
                param.SourceColumn = "ANALISTAFINALIZADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ID_SOFTWARE";
                param.Size = 0;
                param.SourceColumn = "ID_SOFTWARE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID_SOFTWARE";
                param.Size = 0;
                param.SourceColumn = "ID_SOFTWARE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_SOFTWARE";
                param.Size = 0;
                param.SourceColumn = "SOFTWARE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_SOFTWARE";
                param.Size = 0;
                param.SourceColumn = "SOFTWARE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_PRIORIDADE";
                param.Size = 0;
                param.SourceColumn = "PRIORIDADE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_PRIORIDADE";
                param.Size = 0;
                param.SourceColumn = "PRIORIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ID_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "ID_CLIENTE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID_CLIENTE";
                param.Size = 0;
                param.SourceColumn = "ID_CLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_FANTASIACLIENTE";
                param.Size = 0;
                param.SourceColumn = "FANTASIACLIENTE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_FANTASIACLIENTE";
                param.Size = 0;
                param.SourceColumn = "FANTASIACLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ID_TELAROTINA";
                param.Size = 0;
                param.SourceColumn = "ID_TELAROTINA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID_TELAROTINA";
                param.Size = 0;
                param.SourceColumn = "ID_TELAROTINA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TELAROTINA";
                param.Size = 0;
                param.SourceColumn = "TELAROTINA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TELAROTINA";
                param.Size = 0;
                param.SourceColumn = "TELAROTINA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_AMBIENTE";
                param.Size = 0;
                param.SourceColumn = "AMBIENTE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_AMBIENTE";
                param.Size = 0;
                param.SourceColumn = "AMBIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ID_CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "ID_CATEGORIA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID_CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "ID_CATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "CATEGORIA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CATEGORIA";
                param.Size = 0;
                param.SourceColumn = "CATEGORIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ASSUNTO";
                param.Size = 0;
                param.SourceColumn = "ASSUNTO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ASSUNTO";
                param.Size = 0;
                param.SourceColumn = "ASSUNTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CONTATO";
                param.Size = 0;
                param.SourceColumn = "CONTATO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTATO";
                param.Size = 0;
                param.SourceColumn = "CONTATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_STATUS";
                param.Size = 0;
                param.SourceColumn = "STATUS";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_STATUS";
                param.Size = 0;
                param.SourceColumn = "STATUS";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DATAABERTURA";
                param.Size = 0;
                param.SourceColumn = "DATAABERTURA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DATAABERTURA";
                param.Size = 0;
                param.SourceColumn = "DATAABERTURA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DATAANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "DATAANDAMENTO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DATAANDAMENTO";
                param.Size = 0;
                param.SourceColumn = "DATAANDAMENTO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DATAFINALIZADO";
                param.Size = 0;
                param.SourceColumn = "DATAFINALIZADO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DATAFINALIZADO";
                param.Size = 0;
                param.SourceColumn = "DATAFINALIZADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_SOL";
                param.Size = 0;
                param.SourceColumn = "SOL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_SOL";
                param.Size = 0;
                param.SourceColumn = "SOL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_IDSOL";
                param.Size = 0;
                param.SourceColumn = "IDSOL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDSOL";
                param.Size = 0;
                param.SourceColumn = "IDSOL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "ch_chamado";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDCHAMADO", "IDCHAMADO");
                this.TableMapping.ColumnMappings.Add("ID_ANALISTA_ABERTURA", "ID_ANALISTA_ABERTURA");
                this.TableMapping.ColumnMappings.Add("ANALISTAABERTURA", "ANALISTAABERTURA");
                this.TableMapping.ColumnMappings.Add("ID_ANALISTA_ANDAMENTO", "ID_ANALISTA_ANDAMENTO");
                this.TableMapping.ColumnMappings.Add("ANALISTAANDAMENTO", "ANALISTAANDAMENTO");
                this.TableMapping.ColumnMappings.Add("ID_ANALISTA_FINALIZADO", "ID_ANALISTA_FINALIZADO");
                this.TableMapping.ColumnMappings.Add("ANALISTAFINALIZADO", "ANALISTAFINALIZADO");
                this.TableMapping.ColumnMappings.Add("ID_SOFTWARE", "ID_SOFTWARE");
                this.TableMapping.ColumnMappings.Add("SOFTWARE", "SOFTWARE");
                this.TableMapping.ColumnMappings.Add("PRIORIDADE", "PRIORIDADE");
                this.TableMapping.ColumnMappings.Add("ID_CLIENTE", "ID_CLIENTE");
                this.TableMapping.ColumnMappings.Add("FANTASIACLIENTE", "FANTASIACLIENTE");
                this.TableMapping.ColumnMappings.Add("ID_TELAROTINA", "ID_TELAROTINA");
                this.TableMapping.ColumnMappings.Add("TELAROTINA", "TELAROTINA");
                this.TableMapping.ColumnMappings.Add("AMBIENTE", "AMBIENTE");
                this.TableMapping.ColumnMappings.Add("ID_CATEGORIA", "ID_CATEGORIA");
                this.TableMapping.ColumnMappings.Add("CATEGORIA", "CATEGORIA");
                this.TableMapping.ColumnMappings.Add("ASSUNTO", "ASSUNTO");
                this.TableMapping.ColumnMappings.Add("CONTATO", "CONTATO");
                this.TableMapping.ColumnMappings.Add("TEL1", "TEL1");
                this.TableMapping.ColumnMappings.Add("STATUS", "STATUS");
                this.TableMapping.ColumnMappings.Add("DETALHES", "DETALHES");
                this.TableMapping.ColumnMappings.Add("PARECER", "PARECER");
                this.TableMapping.ColumnMappings.Add("DATAABERTURA", "DATAABERTURA");
                this.TableMapping.ColumnMappings.Add("DATAANDAMENTO", "DATAANDAMENTO");
                this.TableMapping.ColumnMappings.Add("DATAFINALIZADO", "DATAFINALIZADO");
                this.TableMapping.ColumnMappings.Add("SOL", "SOL");
                this.TableMapping.ColumnMappings.Add("IDSOL", "IDSOL");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_chamadoRow Newch_chamadoRow() {
                return ((ch_chamadoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ch_chamadoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ch_chamadoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ch_chamadoRowChanged != null)) {
                    this.ch_chamadoRowChanged(this, new ch_chamadoRowChangeEvent(((ch_chamadoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ch_chamadoRowChanging != null)) {
                    this.ch_chamadoRowChanging(this, new ch_chamadoRowChangeEvent(((ch_chamadoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ch_chamadoRowDeleted != null)) {
                    this.ch_chamadoRowDeleted(this, new ch_chamadoRowChangeEvent(((ch_chamadoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ch_chamadoRowDeleting != null)) {
                    this.ch_chamadoRowDeleting(this, new ch_chamadoRowChangeEvent(((ch_chamadoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removech_chamadoRow(ch_chamadoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LUA ds = new LUA();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ch_chamadoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public partial class ch_chamadoRow : System.Data.DataRow {
            
            private ch_chamadoDataTable tablech_chamado;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ch_chamadoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablech_chamado = ((ch_chamadoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDCHAMADO {
                get {
                    return ((int)(this[this.tablech_chamado.IDCHAMADOColumn]));
                }
                set {
                    this[this.tablech_chamado.IDCHAMADOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_ANALISTA_ABERTURA {
                get {
                    try {
                        return ((int)(this[this.tablech_chamado.ID_ANALISTA_ABERTURAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.ID_ANALISTA_ABERTURAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ANALISTAABERTURA {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.ANALISTAABERTURAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.ANALISTAABERTURAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_ANALISTA_ANDAMENTO {
                get {
                    try {
                        return ((int)(this[this.tablech_chamado.ID_ANALISTA_ANDAMENTOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.ID_ANALISTA_ANDAMENTOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ANALISTAANDAMENTO {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.ANALISTAANDAMENTOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.ANALISTAANDAMENTOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_ANALISTA_FINALIZADO {
                get {
                    try {
                        return ((int)(this[this.tablech_chamado.ID_ANALISTA_FINALIZADOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.ID_ANALISTA_FINALIZADOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ANALISTAFINALIZADO {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.ANALISTAFINALIZADOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.ANALISTAFINALIZADOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_SOFTWARE {
                get {
                    try {
                        return ((int)(this[this.tablech_chamado.ID_SOFTWAREColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.ID_SOFTWAREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SOFTWARE {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.SOFTWAREColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.SOFTWAREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRIORIDADE {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.PRIORIDADEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.PRIORIDADEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_CLIENTE {
                get {
                    try {
                        return ((int)(this[this.tablech_chamado.ID_CLIENTEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.ID_CLIENTEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FANTASIACLIENTE {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.FANTASIACLIENTEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.FANTASIACLIENTEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_TELAROTINA {
                get {
                    try {
                        return ((int)(this[this.tablech_chamado.ID_TELAROTINAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.ID_TELAROTINAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TELAROTINA {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.TELAROTINAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.TELAROTINAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMBIENTE {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.AMBIENTEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.AMBIENTEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_CATEGORIA {
                get {
                    try {
                        return ((int)(this[this.tablech_chamado.ID_CATEGORIAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.ID_CATEGORIAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORIA {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.CATEGORIAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.CATEGORIAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ASSUNTO {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.ASSUNTOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.ASSUNTOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTATO {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.CONTATOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.CONTATOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TEL1 {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.TEL1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.TEL1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATUS {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.STATUSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.STATUSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DETALHES {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.DETALHESColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.DETALHESColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PARECER {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.PARECERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.PARECERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATAABERTURA {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablech_chamado.DATAABERTURAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.DATAABERTURAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATAANDAMENTO {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablech_chamado.DATAANDAMENTOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.DATAANDAMENTOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATAFINALIZADO {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablech_chamado.DATAFINALIZADOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.DATAFINALIZADOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SOL {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.SOLColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.SOLColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDSOL {
                get {
                    try {
                        return ((string)(this[this.tablech_chamado.IDSOLColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_chamado.IDSOLColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_ANALISTA_ABERTURANull() {
                return this.IsNull(this.tablech_chamado.ID_ANALISTA_ABERTURAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_ANALISTA_ABERTURANull() {
                this[this.tablech_chamado.ID_ANALISTA_ABERTURAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsANALISTAABERTURANull() {
                return this.IsNull(this.tablech_chamado.ANALISTAABERTURAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetANALISTAABERTURANull() {
                this[this.tablech_chamado.ANALISTAABERTURAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_ANALISTA_ANDAMENTONull() {
                return this.IsNull(this.tablech_chamado.ID_ANALISTA_ANDAMENTOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_ANALISTA_ANDAMENTONull() {
                this[this.tablech_chamado.ID_ANALISTA_ANDAMENTOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsANALISTAANDAMENTONull() {
                return this.IsNull(this.tablech_chamado.ANALISTAANDAMENTOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetANALISTAANDAMENTONull() {
                this[this.tablech_chamado.ANALISTAANDAMENTOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_ANALISTA_FINALIZADONull() {
                return this.IsNull(this.tablech_chamado.ID_ANALISTA_FINALIZADOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_ANALISTA_FINALIZADONull() {
                this[this.tablech_chamado.ID_ANALISTA_FINALIZADOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsANALISTAFINALIZADONull() {
                return this.IsNull(this.tablech_chamado.ANALISTAFINALIZADOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetANALISTAFINALIZADONull() {
                this[this.tablech_chamado.ANALISTAFINALIZADOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_SOFTWARENull() {
                return this.IsNull(this.tablech_chamado.ID_SOFTWAREColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_SOFTWARENull() {
                this[this.tablech_chamado.ID_SOFTWAREColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSOFTWARENull() {
                return this.IsNull(this.tablech_chamado.SOFTWAREColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSOFTWARENull() {
                this[this.tablech_chamado.SOFTWAREColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRIORIDADENull() {
                return this.IsNull(this.tablech_chamado.PRIORIDADEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRIORIDADENull() {
                this[this.tablech_chamado.PRIORIDADEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_CLIENTENull() {
                return this.IsNull(this.tablech_chamado.ID_CLIENTEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_CLIENTENull() {
                this[this.tablech_chamado.ID_CLIENTEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFANTASIACLIENTENull() {
                return this.IsNull(this.tablech_chamado.FANTASIACLIENTEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFANTASIACLIENTENull() {
                this[this.tablech_chamado.FANTASIACLIENTEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_TELAROTINANull() {
                return this.IsNull(this.tablech_chamado.ID_TELAROTINAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_TELAROTINANull() {
                this[this.tablech_chamado.ID_TELAROTINAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTELAROTINANull() {
                return this.IsNull(this.tablech_chamado.TELAROTINAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTELAROTINANull() {
                this[this.tablech_chamado.TELAROTINAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMBIENTENull() {
                return this.IsNull(this.tablech_chamado.AMBIENTEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMBIENTENull() {
                this[this.tablech_chamado.AMBIENTEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_CATEGORIANull() {
                return this.IsNull(this.tablech_chamado.ID_CATEGORIAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_CATEGORIANull() {
                this[this.tablech_chamado.ID_CATEGORIAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCATEGORIANull() {
                return this.IsNull(this.tablech_chamado.CATEGORIAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCATEGORIANull() {
                this[this.tablech_chamado.CATEGORIAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsASSUNTONull() {
                return this.IsNull(this.tablech_chamado.ASSUNTOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetASSUNTONull() {
                this[this.tablech_chamado.ASSUNTOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONTATONull() {
                return this.IsNull(this.tablech_chamado.CONTATOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONTATONull() {
                this[this.tablech_chamado.CONTATOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTEL1Null() {
                return this.IsNull(this.tablech_chamado.TEL1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTEL1Null() {
                this[this.tablech_chamado.TEL1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATUSNull() {
                return this.IsNull(this.tablech_chamado.STATUSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATUSNull() {
                this[this.tablech_chamado.STATUSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDETALHESNull() {
                return this.IsNull(this.tablech_chamado.DETALHESColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDETALHESNull() {
                this[this.tablech_chamado.DETALHESColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARECERNull() {
                return this.IsNull(this.tablech_chamado.PARECERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARECERNull() {
                this[this.tablech_chamado.PARECERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATAABERTURANull() {
                return this.IsNull(this.tablech_chamado.DATAABERTURAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATAABERTURANull() {
                this[this.tablech_chamado.DATAABERTURAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATAANDAMENTONull() {
                return this.IsNull(this.tablech_chamado.DATAANDAMENTOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATAANDAMENTONull() {
                this[this.tablech_chamado.DATAANDAMENTOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATAFINALIZADONull() {
                return this.IsNull(this.tablech_chamado.DATAFINALIZADOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATAFINALIZADONull() {
                this[this.tablech_chamado.DATAFINALIZADOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSOLNull() {
                return this.IsNull(this.tablech_chamado.SOLColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSOLNull() {
                this[this.tablech_chamado.SOLColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDSOLNull() {
                return this.IsNull(this.tablech_chamado.IDSOLColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDSOLNull() {
                this[this.tablech_chamado.IDSOLColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public class ch_chamadoRowChangeEvent : System.EventArgs {
            
            private ch_chamadoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_chamadoRowChangeEvent(ch_chamadoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_chamadoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ch_softwareDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDSOFTWARE;
            
            private System.Data.DataColumn columnSOFTWARE;
            
            private System.Data.DataColumn columnATIVO;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_softwareDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_softwareDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "ch_software";
                this.Name = "ch_software";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ch_softwareDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ch_softwareDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDSOFTWAREColumn {
                get {
                    return this.columnIDSOFTWARE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn SOFTWAREColumn {
                get {
                    return this.columnSOFTWARE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ATIVOColumn {
                get {
                    return this.columnATIVO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_softwareRow this[int index] {
                get {
                    return ((ch_softwareRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event ch_softwareRowChangeEventHandler ch_softwareRowChanging;
            
            public event ch_softwareRowChangeEventHandler ch_softwareRowChanged;
            
            public event ch_softwareRowChangeEventHandler ch_softwareRowDeleting;
            
            public event ch_softwareRowChangeEventHandler ch_softwareRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addch_softwareRow(ch_softwareRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_softwareRow Addch_softwareRow(int IDSOFTWARE, string SOFTWARE, string ATIVO) {
                ch_softwareRow rowch_softwareRow = ((ch_softwareRow)(this.NewRow()));
                rowch_softwareRow.ItemArray = new object[] {
                        IDSOFTWARE,
                        SOFTWARE,
                        ATIVO};
                this.Rows.Add(rowch_softwareRow);
                return rowch_softwareRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_softwareRow FindByIDSOFTWARE(int IDSOFTWARE) {
                return ((ch_softwareRow)(this.Rows.Find(new object[] {
                            IDSOFTWARE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ch_softwareDataTable cln = ((ch_softwareDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ch_softwareDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDSOFTWARE = base.Columns["IDSOFTWARE"];
                this.columnSOFTWARE = base.Columns["SOFTWARE"];
                this.columnATIVO = base.Columns["ATIVO"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDSOFTWARE = new System.Data.DataColumn("IDSOFTWARE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDSOFTWARE);
                this.columnSOFTWARE = new System.Data.DataColumn("SOFTWARE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOFTWARE);
                this.columnATIVO = new System.Data.DataColumn("ATIVO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnATIVO);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDSOFTWARE}, true));
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint2", new System.Data.DataColumn[] {
                                this.columnSOFTWARE}, false));
                this.columnIDSOFTWARE.AllowDBNull = false;
                this.columnIDSOFTWARE.Unique = true;
                this.columnSOFTWARE.AllowDBNull = false;
                this.columnSOFTWARE.Unique = true;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Port=3307;Database=lua;Persist Security" +
                            " Info=True;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from lua.ch_software", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `lua`.`ch_software` (`SOFTWARE`, `ATIVO`) VALUES (:SOFTWARE, :ATIVO)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "SOFTWARE";
                param.Size = 0;
                param.SourceColumn = "SOFTWARE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand("UPDATE `lua`.`ch_software` SET `SOFTWARE` = :SOFTWARE, `ATIVO` = :ATIVO WHERE ((`" +
                        "IDSOFTWARE` = :Original_IDSOFTWARE) AND (`SOFTWARE` = :Original_SOFTWARE) AND ((" +
                        ":IsNull_ATIVO = 1 AND `ATIVO` IS NULL) OR (`ATIVO` = :Original_ATIVO)))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "SOFTWARE";
                param.Size = 0;
                param.SourceColumn = "SOFTWARE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDSOFTWARE";
                param.Size = 0;
                param.SourceColumn = "IDSOFTWARE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_SOFTWARE";
                param.Size = 0;
                param.SourceColumn = "SOFTWARE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `lua`.`ch_software` WHERE ((`IDSOFTWARE` = :Original_IDSOFTWARE) AND " +
                        "(`SOFTWARE` = :Original_SOFTWARE) AND ((:IsNull_ATIVO = 1 AND `ATIVO` IS NULL) O" +
                        "R (`ATIVO` = :Original_ATIVO)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDSOFTWARE";
                param.Size = 0;
                param.SourceColumn = "IDSOFTWARE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_SOFTWARE";
                param.Size = 0;
                param.SourceColumn = "SOFTWARE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "ch_software";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDSOFTWARE", "IDSOFTWARE");
                this.TableMapping.ColumnMappings.Add("SOFTWARE", "SOFTWARE");
                this.TableMapping.ColumnMappings.Add("ATIVO", "ATIVO");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_softwareRow Newch_softwareRow() {
                return ((ch_softwareRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ch_softwareRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ch_softwareRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ch_softwareRowChanged != null)) {
                    this.ch_softwareRowChanged(this, new ch_softwareRowChangeEvent(((ch_softwareRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ch_softwareRowChanging != null)) {
                    this.ch_softwareRowChanging(this, new ch_softwareRowChangeEvent(((ch_softwareRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ch_softwareRowDeleted != null)) {
                    this.ch_softwareRowDeleted(this, new ch_softwareRowChangeEvent(((ch_softwareRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ch_softwareRowDeleting != null)) {
                    this.ch_softwareRowDeleting(this, new ch_softwareRowChangeEvent(((ch_softwareRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removech_softwareRow(ch_softwareRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LUA ds = new LUA();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ch_softwareDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public partial class ch_softwareRow : System.Data.DataRow {
            
            private ch_softwareDataTable tablech_software;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ch_softwareRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablech_software = ((ch_softwareDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDSOFTWARE {
                get {
                    return ((int)(this[this.tablech_software.IDSOFTWAREColumn]));
                }
                set {
                    this[this.tablech_software.IDSOFTWAREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SOFTWARE {
                get {
                    return ((string)(this[this.tablech_software.SOFTWAREColumn]));
                }
                set {
                    this[this.tablech_software.SOFTWAREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ATIVO {
                get {
                    try {
                        return ((string)(this[this.tablech_software.ATIVOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_software.ATIVOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsATIVONull() {
                return this.IsNull(this.tablech_software.ATIVOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetATIVONull() {
                this[this.tablech_software.ATIVOColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public class ch_softwareRowChangeEvent : System.EventArgs {
            
            private ch_softwareRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_softwareRowChangeEvent(ch_softwareRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_softwareRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ch_telarotinaDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDTELAROTINA;
            
            private System.Data.DataColumn columnTELAROTINA;
            
            private System.Data.DataColumn columnATIVO;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_telarotinaDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_telarotinaDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "ch_telarotina";
                this.Name = "ch_telarotina";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ch_telarotinaDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ch_telarotinaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDTELAROTINAColumn {
                get {
                    return this.columnIDTELAROTINA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TELAROTINAColumn {
                get {
                    return this.columnTELAROTINA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ATIVOColumn {
                get {
                    return this.columnATIVO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_telarotinaRow this[int index] {
                get {
                    return ((ch_telarotinaRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event ch_telarotinaRowChangeEventHandler ch_telarotinaRowChanging;
            
            public event ch_telarotinaRowChangeEventHandler ch_telarotinaRowChanged;
            
            public event ch_telarotinaRowChangeEventHandler ch_telarotinaRowDeleting;
            
            public event ch_telarotinaRowChangeEventHandler ch_telarotinaRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addch_telarotinaRow(ch_telarotinaRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_telarotinaRow Addch_telarotinaRow(int IDTELAROTINA, string TELAROTINA, string ATIVO) {
                ch_telarotinaRow rowch_telarotinaRow = ((ch_telarotinaRow)(this.NewRow()));
                rowch_telarotinaRow.ItemArray = new object[] {
                        IDTELAROTINA,
                        TELAROTINA,
                        ATIVO};
                this.Rows.Add(rowch_telarotinaRow);
                return rowch_telarotinaRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_telarotinaRow FindByIDTELAROTINA(int IDTELAROTINA) {
                return ((ch_telarotinaRow)(this.Rows.Find(new object[] {
                            IDTELAROTINA})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ch_telarotinaDataTable cln = ((ch_telarotinaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ch_telarotinaDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDTELAROTINA = base.Columns["IDTELAROTINA"];
                this.columnTELAROTINA = base.Columns["TELAROTINA"];
                this.columnATIVO = base.Columns["ATIVO"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDTELAROTINA = new System.Data.DataColumn("IDTELAROTINA", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDTELAROTINA);
                this.columnTELAROTINA = new System.Data.DataColumn("TELAROTINA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTELAROTINA);
                this.columnATIVO = new System.Data.DataColumn("ATIVO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnATIVO);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDTELAROTINA}, true));
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint2", new System.Data.DataColumn[] {
                                this.columnTELAROTINA}, false));
                this.columnIDTELAROTINA.AllowDBNull = false;
                this.columnIDTELAROTINA.Unique = true;
                this.columnTELAROTINA.AllowDBNull = false;
                this.columnTELAROTINA.Unique = true;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Port=3307;Database=lua;Persist Security" +
                            " Info=True;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from lua.ch_telarotina", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `lua`.`ch_telarotina` (`TELAROTINA`, `ATIVO`) VALUES (:TELAROTINA, :A" +
                        "TIVO)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TELAROTINA";
                param.Size = 0;
                param.SourceColumn = "TELAROTINA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand("UPDATE `lua`.`ch_telarotina` SET `TELAROTINA` = :TELAROTINA, `ATIVO` = :ATIVO WHE" +
                        "RE ((`IDTELAROTINA` = :Original_IDTELAROTINA) AND (`TELAROTINA` = :Original_TELA" +
                        "ROTINA) AND ((:IsNull_ATIVO = 1 AND `ATIVO` IS NULL) OR (`ATIVO` = :Original_ATI" +
                        "VO)))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TELAROTINA";
                param.Size = 0;
                param.SourceColumn = "TELAROTINA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDTELAROTINA";
                param.Size = 0;
                param.SourceColumn = "IDTELAROTINA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TELAROTINA";
                param.Size = 0;
                param.SourceColumn = "TELAROTINA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `lua`.`ch_telarotina` WHERE ((`IDTELAROTINA` = :Original_IDTELAROTINA" +
                        ") AND (`TELAROTINA` = :Original_TELAROTINA) AND ((:IsNull_ATIVO = 1 AND `ATIVO` " +
                        "IS NULL) OR (`ATIVO` = :Original_ATIVO)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDTELAROTINA";
                param.Size = 0;
                param.SourceColumn = "IDTELAROTINA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TELAROTINA";
                param.Size = 0;
                param.SourceColumn = "TELAROTINA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "ch_telarotina";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDTELAROTINA", "IDTELAROTINA");
                this.TableMapping.ColumnMappings.Add("TELAROTINA", "TELAROTINA");
                this.TableMapping.ColumnMappings.Add("ATIVO", "ATIVO");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_telarotinaRow Newch_telarotinaRow() {
                return ((ch_telarotinaRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ch_telarotinaRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ch_telarotinaRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ch_telarotinaRowChanged != null)) {
                    this.ch_telarotinaRowChanged(this, new ch_telarotinaRowChangeEvent(((ch_telarotinaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ch_telarotinaRowChanging != null)) {
                    this.ch_telarotinaRowChanging(this, new ch_telarotinaRowChangeEvent(((ch_telarotinaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ch_telarotinaRowDeleted != null)) {
                    this.ch_telarotinaRowDeleted(this, new ch_telarotinaRowChangeEvent(((ch_telarotinaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ch_telarotinaRowDeleting != null)) {
                    this.ch_telarotinaRowDeleting(this, new ch_telarotinaRowChangeEvent(((ch_telarotinaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removech_telarotinaRow(ch_telarotinaRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LUA ds = new LUA();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ch_telarotinaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public partial class ch_telarotinaRow : System.Data.DataRow {
            
            private ch_telarotinaDataTable tablech_telarotina;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ch_telarotinaRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablech_telarotina = ((ch_telarotinaDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDTELAROTINA {
                get {
                    return ((int)(this[this.tablech_telarotina.IDTELAROTINAColumn]));
                }
                set {
                    this[this.tablech_telarotina.IDTELAROTINAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TELAROTINA {
                get {
                    return ((string)(this[this.tablech_telarotina.TELAROTINAColumn]));
                }
                set {
                    this[this.tablech_telarotina.TELAROTINAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ATIVO {
                get {
                    try {
                        return ((string)(this[this.tablech_telarotina.ATIVOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablech_telarotina.ATIVOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsATIVONull() {
                return this.IsNull(this.tablech_telarotina.ATIVOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetATIVONull() {
                this[this.tablech_telarotina.ATIVOColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public class ch_telarotinaRowChangeEvent : System.EventArgs {
            
            private ch_telarotinaRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_telarotinaRowChangeEvent(ch_telarotinaRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ch_telarotinaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class cl_clienteDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDCLIENTE;
            
            private System.Data.DataColumn columnRAZAO;
            
            private System.Data.DataColumn columnFANTASIA;
            
            private System.Data.DataColumn columnCPFCNPJ;
            
            private System.Data.DataColumn columnPESSOA;
            
            private System.Data.DataColumn columnCONTATO;
            
            private System.Data.DataColumn columnEMAIL;
            
            private System.Data.DataColumn columnIDECO;
            
            private System.Data.DataColumn columnTEL1;
            
            private System.Data.DataColumn columnTEL2;
            
            private System.Data.DataColumn columnTEL3;
            
            private System.Data.DataColumn columnNUMERO;
            
            private System.Data.DataColumn columnRUA;
            
            private System.Data.DataColumn columnBAIRRO;
            
            private System.Data.DataColumn columnCIDADE;
            
            private System.Data.DataColumn columnESTADO;
            
            private System.Data.DataColumn columnCEP;
            
            private System.Data.DataColumn columnREFERENCIA;
            
            private System.Data.DataColumn columnID_CONTADOR;
            
            private System.Data.DataColumn columnATIVO;
            
            private System.Data.DataColumn columnOBSERVACOES;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cl_clienteDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cl_clienteDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "cl_cliente";
                this.Name = "cl_cliente";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cl_clienteDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected cl_clienteDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDCLIENTEColumn {
                get {
                    return this.columnIDCLIENTE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn RAZAOColumn {
                get {
                    return this.columnRAZAO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn FANTASIAColumn {
                get {
                    return this.columnFANTASIA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CPFCNPJColumn {
                get {
                    return this.columnCPFCNPJ;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn PESSOAColumn {
                get {
                    return this.columnPESSOA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CONTATOColumn {
                get {
                    return this.columnCONTATO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn EMAILColumn {
                get {
                    return this.columnEMAIL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDECOColumn {
                get {
                    return this.columnIDECO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TEL1Column {
                get {
                    return this.columnTEL1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TEL2Column {
                get {
                    return this.columnTEL2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TEL3Column {
                get {
                    return this.columnTEL3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn NUMEROColumn {
                get {
                    return this.columnNUMERO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn RUAColumn {
                get {
                    return this.columnRUA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn BAIRROColumn {
                get {
                    return this.columnBAIRRO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CIDADEColumn {
                get {
                    return this.columnCIDADE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ESTADOColumn {
                get {
                    return this.columnESTADO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CEPColumn {
                get {
                    return this.columnCEP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn REFERENCIAColumn {
                get {
                    return this.columnREFERENCIA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ID_CONTADORColumn {
                get {
                    return this.columnID_CONTADOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ATIVOColumn {
                get {
                    return this.columnATIVO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn OBSERVACOESColumn {
                get {
                    return this.columnOBSERVACOES;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cl_clienteRow this[int index] {
                get {
                    return ((cl_clienteRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event cl_clienteRowChangeEventHandler cl_clienteRowChanging;
            
            public event cl_clienteRowChangeEventHandler cl_clienteRowChanged;
            
            public event cl_clienteRowChangeEventHandler cl_clienteRowDeleting;
            
            public event cl_clienteRowChangeEventHandler cl_clienteRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addcl_clienteRow(cl_clienteRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cl_clienteRow Addcl_clienteRow(
                        int IDCLIENTE, 
                        string RAZAO, 
                        string FANTASIA, 
                        string CPFCNPJ, 
                        string PESSOA, 
                        string CONTATO, 
                        string EMAIL, 
                        string IDECO, 
                        string TEL1, 
                        string TEL2, 
                        string TEL3, 
                        string NUMERO, 
                        string RUA, 
                        string BAIRRO, 
                        string CIDADE, 
                        string ESTADO, 
                        string CEP, 
                        string REFERENCIA, 
                        int ID_CONTADOR, 
                        string ATIVO, 
                        string OBSERVACOES) {
                cl_clienteRow rowcl_clienteRow = ((cl_clienteRow)(this.NewRow()));
                rowcl_clienteRow.ItemArray = new object[] {
                        IDCLIENTE,
                        RAZAO,
                        FANTASIA,
                        CPFCNPJ,
                        PESSOA,
                        CONTATO,
                        EMAIL,
                        IDECO,
                        TEL1,
                        TEL2,
                        TEL3,
                        NUMERO,
                        RUA,
                        BAIRRO,
                        CIDADE,
                        ESTADO,
                        CEP,
                        REFERENCIA,
                        ID_CONTADOR,
                        ATIVO,
                        OBSERVACOES};
                this.Rows.Add(rowcl_clienteRow);
                return rowcl_clienteRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cl_clienteRow FindByIDCLIENTE(int IDCLIENTE) {
                return ((cl_clienteRow)(this.Rows.Find(new object[] {
                            IDCLIENTE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                cl_clienteDataTable cln = ((cl_clienteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new cl_clienteDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDCLIENTE = base.Columns["IDCLIENTE"];
                this.columnRAZAO = base.Columns["RAZAO"];
                this.columnFANTASIA = base.Columns["FANTASIA"];
                this.columnCPFCNPJ = base.Columns["CPFCNPJ"];
                this.columnPESSOA = base.Columns["PESSOA"];
                this.columnCONTATO = base.Columns["CONTATO"];
                this.columnEMAIL = base.Columns["EMAIL"];
                this.columnIDECO = base.Columns["IDECO"];
                this.columnTEL1 = base.Columns["TEL1"];
                this.columnTEL2 = base.Columns["TEL2"];
                this.columnTEL3 = base.Columns["TEL3"];
                this.columnNUMERO = base.Columns["NUMERO"];
                this.columnRUA = base.Columns["RUA"];
                this.columnBAIRRO = base.Columns["BAIRRO"];
                this.columnCIDADE = base.Columns["CIDADE"];
                this.columnESTADO = base.Columns["ESTADO"];
                this.columnCEP = base.Columns["CEP"];
                this.columnREFERENCIA = base.Columns["REFERENCIA"];
                this.columnID_CONTADOR = base.Columns["ID_CONTADOR"];
                this.columnATIVO = base.Columns["ATIVO"];
                this.columnOBSERVACOES = base.Columns["OBSERVACOES"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDCLIENTE = new System.Data.DataColumn("IDCLIENTE", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDCLIENTE);
                this.columnRAZAO = new System.Data.DataColumn("RAZAO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAZAO);
                this.columnFANTASIA = new System.Data.DataColumn("FANTASIA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFANTASIA);
                this.columnCPFCNPJ = new System.Data.DataColumn("CPFCNPJ", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCPFCNPJ);
                this.columnPESSOA = new System.Data.DataColumn("PESSOA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPESSOA);
                this.columnCONTATO = new System.Data.DataColumn("CONTATO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTATO);
                this.columnEMAIL = new System.Data.DataColumn("EMAIL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAIL);
                this.columnIDECO = new System.Data.DataColumn("IDECO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDECO);
                this.columnTEL1 = new System.Data.DataColumn("TEL1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEL1);
                this.columnTEL2 = new System.Data.DataColumn("TEL2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEL2);
                this.columnTEL3 = new System.Data.DataColumn("TEL3", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEL3);
                this.columnNUMERO = new System.Data.DataColumn("NUMERO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUMERO);
                this.columnRUA = new System.Data.DataColumn("RUA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRUA);
                this.columnBAIRRO = new System.Data.DataColumn("BAIRRO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBAIRRO);
                this.columnCIDADE = new System.Data.DataColumn("CIDADE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCIDADE);
                this.columnESTADO = new System.Data.DataColumn("ESTADO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnESTADO);
                this.columnCEP = new System.Data.DataColumn("CEP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCEP);
                this.columnREFERENCIA = new System.Data.DataColumn("REFERENCIA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnREFERENCIA);
                this.columnID_CONTADOR = new System.Data.DataColumn("ID_CONTADOR", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_CONTADOR);
                this.columnATIVO = new System.Data.DataColumn("ATIVO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnATIVO);
                this.columnOBSERVACOES = new System.Data.DataColumn("OBSERVACOES", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBSERVACOES);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDCLIENTE}, true));
                this.columnIDCLIENTE.AllowDBNull = false;
                this.columnIDCLIENTE.Unique = true;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Port=3307;Database=lua;Persist Security" +
                            " Info=True;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from lua.cl_cliente", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand(@"INSERT INTO `lua`.`cl_cliente` (`RAZAO`, `FANTASIA`, `CPFCNPJ`, `PESSOA`, `CONTATO`, `EMAIL`, `IDECO`, `TEL1`, `TEL2`, `TEL3`, `NUMERO`, `RUA`, `BAIRRO`, `CIDADE`, `ESTADO`, `CEP`, `REFERENCIA`, `ID_CONTADOR`, `ATIVO`, `OBSERVACOES`) VALUES (:RAZAO, :FANTASIA, :CPFCNPJ, :PESSOA, :CONTATO, :EMAIL, :IDECO, :TEL1, :TEL2, :TEL3, :NUMERO, :RUA, :BAIRRO, :CIDADE, :ESTADO, :CEP, :REFERENCIA, :ID_CONTADOR, :ATIVO, :OBSERVACOES)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "RAZAO";
                param.Size = 0;
                param.SourceColumn = "RAZAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "FANTASIA";
                param.Size = 0;
                param.SourceColumn = "FANTASIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CPFCNPJ";
                param.Size = 0;
                param.SourceColumn = "CPFCNPJ";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PESSOA";
                param.Size = 0;
                param.SourceColumn = "PESSOA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTATO";
                param.Size = 0;
                param.SourceColumn = "CONTATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IDECO";
                param.Size = 0;
                param.SourceColumn = "IDECO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TEL2";
                param.Size = 0;
                param.SourceColumn = "TEL2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TEL3";
                param.Size = 0;
                param.SourceColumn = "TEL3";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NUMERO";
                param.Size = 0;
                param.SourceColumn = "NUMERO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "RUA";
                param.Size = 0;
                param.SourceColumn = "RUA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ESTADO";
                param.Size = 0;
                param.SourceColumn = "ESTADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CEP";
                param.Size = 0;
                param.SourceColumn = "CEP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "REFERENCIA";
                param.Size = 0;
                param.SourceColumn = "REFERENCIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID_CONTADOR";
                param.Size = 0;
                param.SourceColumn = "ID_CONTADOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "OBSERVACOES";
                param.Size = 0;
                param.SourceColumn = "OBSERVACOES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand("UPDATE `lua`.`cl_cliente` SET `RAZAO` = :RAZAO, `FANTASIA` = :FANTASIA, `CPFCNPJ`" +
                        " = :CPFCNPJ, `PESSOA` = :PESSOA, `CONTATO` = :CONTATO, `EMAIL` = :EMAIL, `IDECO`" +
                        " = :IDECO, `TEL1` = :TEL1, `TEL2` = :TEL2, `TEL3` = :TEL3, `NUMERO` = :NUMERO, `" +
                        "RUA` = :RUA, `BAIRRO` = :BAIRRO, `CIDADE` = :CIDADE, `ESTADO` = :ESTADO, `CEP` =" +
                        " :CEP, `REFERENCIA` = :REFERENCIA, `ID_CONTADOR` = :ID_CONTADOR, `ATIVO` = :ATIV" +
                        "O, `OBSERVACOES` = :OBSERVACOES WHERE ((`IDCLIENTE` = :Original_IDCLIENTE) AND (" +
                        "(:IsNull_RAZAO = 1 AND `RAZAO` IS NULL) OR (`RAZAO` = :Original_RAZAO)) AND ((:I" +
                        "sNull_FANTASIA = 1 AND `FANTASIA` IS NULL) OR (`FANTASIA` = :Original_FANTASIA))" +
                        " AND ((:IsNull_CPFCNPJ = 1 AND `CPFCNPJ` IS NULL) OR (`CPFCNPJ` = :Original_CPFC" +
                        "NPJ)) AND ((:IsNull_PESSOA = 1 AND `PESSOA` IS NULL) OR (`PESSOA` = :Original_PE" +
                        "SSOA)) AND ((:IsNull_CONTATO = 1 AND `CONTATO` IS NULL) OR (`CONTATO` = :Origina" +
                        "l_CONTATO)) AND ((:IsNull_EMAIL = 1 AND `EMAIL` IS NULL) OR (`EMAIL` = :Original" +
                        "_EMAIL)) AND ((:IsNull_IDECO = 1 AND `IDECO` IS NULL) OR (`IDECO` = :Original_ID" +
                        "ECO)) AND ((:IsNull_TEL1 = 1 AND `TEL1` IS NULL) OR (`TEL1` = :Original_TEL1)) A" +
                        "ND ((:IsNull_TEL2 = 1 AND `TEL2` IS NULL) OR (`TEL2` = :Original_TEL2)) AND ((:I" +
                        "sNull_TEL3 = 1 AND `TEL3` IS NULL) OR (`TEL3` = :Original_TEL3)) AND ((:IsNull_N" +
                        "UMERO = 1 AND `NUMERO` IS NULL) OR (`NUMERO` = :Original_NUMERO)) AND ((:IsNull_" +
                        "RUA = 1 AND `RUA` IS NULL) OR (`RUA` = :Original_RUA)) AND ((:IsNull_BAIRRO = 1 " +
                        "AND `BAIRRO` IS NULL) OR (`BAIRRO` = :Original_BAIRRO)) AND ((:IsNull_CIDADE = 1" +
                        " AND `CIDADE` IS NULL) OR (`CIDADE` = :Original_CIDADE)) AND ((:IsNull_ESTADO = " +
                        "1 AND `ESTADO` IS NULL) OR (`ESTADO` = :Original_ESTADO)) AND ((:IsNull_CEP = 1 " +
                        "AND `CEP` IS NULL) OR (`CEP` = :Original_CEP)) AND ((:IsNull_REFERENCIA = 1 AND " +
                        "`REFERENCIA` IS NULL) OR (`REFERENCIA` = :Original_REFERENCIA)) AND ((:IsNull_ID" +
                        "_CONTADOR = 1 AND `ID_CONTADOR` IS NULL) OR (`ID_CONTADOR` = :Original_ID_CONTAD" +
                        "OR)) AND ((:IsNull_ATIVO = 1 AND `ATIVO` IS NULL) OR (`ATIVO` = :Original_ATIVO)" +
                        "))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "RAZAO";
                param.Size = 0;
                param.SourceColumn = "RAZAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "FANTASIA";
                param.Size = 0;
                param.SourceColumn = "FANTASIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CPFCNPJ";
                param.Size = 0;
                param.SourceColumn = "CPFCNPJ";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "PESSOA";
                param.Size = 0;
                param.SourceColumn = "PESSOA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTATO";
                param.Size = 0;
                param.SourceColumn = "CONTATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IDECO";
                param.Size = 0;
                param.SourceColumn = "IDECO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TEL2";
                param.Size = 0;
                param.SourceColumn = "TEL2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TEL3";
                param.Size = 0;
                param.SourceColumn = "TEL3";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "NUMERO";
                param.Size = 0;
                param.SourceColumn = "NUMERO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "RUA";
                param.Size = 0;
                param.SourceColumn = "RUA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ESTADO";
                param.Size = 0;
                param.SourceColumn = "ESTADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CEP";
                param.Size = 0;
                param.SourceColumn = "CEP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "REFERENCIA";
                param.Size = 0;
                param.SourceColumn = "REFERENCIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ID_CONTADOR";
                param.Size = 0;
                param.SourceColumn = "ID_CONTADOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "OBSERVACOES";
                param.Size = 0;
                param.SourceColumn = "OBSERVACOES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCLIENTE";
                param.Size = 0;
                param.SourceColumn = "IDCLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_RAZAO";
                param.Size = 0;
                param.SourceColumn = "RAZAO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_RAZAO";
                param.Size = 0;
                param.SourceColumn = "RAZAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_FANTASIA";
                param.Size = 0;
                param.SourceColumn = "FANTASIA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_FANTASIA";
                param.Size = 0;
                param.SourceColumn = "FANTASIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CPFCNPJ";
                param.Size = 0;
                param.SourceColumn = "CPFCNPJ";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CPFCNPJ";
                param.Size = 0;
                param.SourceColumn = "CPFCNPJ";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_PESSOA";
                param.Size = 0;
                param.SourceColumn = "PESSOA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_PESSOA";
                param.Size = 0;
                param.SourceColumn = "PESSOA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CONTATO";
                param.Size = 0;
                param.SourceColumn = "CONTATO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTATO";
                param.Size = 0;
                param.SourceColumn = "CONTATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_IDECO";
                param.Size = 0;
                param.SourceColumn = "IDECO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDECO";
                param.Size = 0;
                param.SourceColumn = "IDECO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TEL2";
                param.Size = 0;
                param.SourceColumn = "TEL2";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TEL2";
                param.Size = 0;
                param.SourceColumn = "TEL2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TEL3";
                param.Size = 0;
                param.SourceColumn = "TEL3";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TEL3";
                param.Size = 0;
                param.SourceColumn = "TEL3";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_NUMERO";
                param.Size = 0;
                param.SourceColumn = "NUMERO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NUMERO";
                param.Size = 0;
                param.SourceColumn = "NUMERO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_RUA";
                param.Size = 0;
                param.SourceColumn = "RUA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_RUA";
                param.Size = 0;
                param.SourceColumn = "RUA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ESTADO";
                param.Size = 0;
                param.SourceColumn = "ESTADO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ESTADO";
                param.Size = 0;
                param.SourceColumn = "ESTADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CEP";
                param.Size = 0;
                param.SourceColumn = "CEP";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CEP";
                param.Size = 0;
                param.SourceColumn = "CEP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_REFERENCIA";
                param.Size = 0;
                param.SourceColumn = "REFERENCIA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_REFERENCIA";
                param.Size = 0;
                param.SourceColumn = "REFERENCIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ID_CONTADOR";
                param.Size = 0;
                param.SourceColumn = "ID_CONTADOR";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID_CONTADOR";
                param.Size = 0;
                param.SourceColumn = "ID_CONTADOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `lua`.`cl_cliente` WHERE ((`IDCLIENTE` = :Original_IDCLIENTE) AND ((:" +
                        "IsNull_RAZAO = 1 AND `RAZAO` IS NULL) OR (`RAZAO` = :Original_RAZAO)) AND ((:IsN" +
                        "ull_FANTASIA = 1 AND `FANTASIA` IS NULL) OR (`FANTASIA` = :Original_FANTASIA)) A" +
                        "ND ((:IsNull_CPFCNPJ = 1 AND `CPFCNPJ` IS NULL) OR (`CPFCNPJ` = :Original_CPFCNP" +
                        "J)) AND ((:IsNull_PESSOA = 1 AND `PESSOA` IS NULL) OR (`PESSOA` = :Original_PESS" +
                        "OA)) AND ((:IsNull_CONTATO = 1 AND `CONTATO` IS NULL) OR (`CONTATO` = :Original_" +
                        "CONTATO)) AND ((:IsNull_EMAIL = 1 AND `EMAIL` IS NULL) OR (`EMAIL` = :Original_E" +
                        "MAIL)) AND ((:IsNull_IDECO = 1 AND `IDECO` IS NULL) OR (`IDECO` = :Original_IDEC" +
                        "O)) AND ((:IsNull_TEL1 = 1 AND `TEL1` IS NULL) OR (`TEL1` = :Original_TEL1)) AND" +
                        " ((:IsNull_TEL2 = 1 AND `TEL2` IS NULL) OR (`TEL2` = :Original_TEL2)) AND ((:IsN" +
                        "ull_TEL3 = 1 AND `TEL3` IS NULL) OR (`TEL3` = :Original_TEL3)) AND ((:IsNull_NUM" +
                        "ERO = 1 AND `NUMERO` IS NULL) OR (`NUMERO` = :Original_NUMERO)) AND ((:IsNull_RU" +
                        "A = 1 AND `RUA` IS NULL) OR (`RUA` = :Original_RUA)) AND ((:IsNull_BAIRRO = 1 AN" +
                        "D `BAIRRO` IS NULL) OR (`BAIRRO` = :Original_BAIRRO)) AND ((:IsNull_CIDADE = 1 A" +
                        "ND `CIDADE` IS NULL) OR (`CIDADE` = :Original_CIDADE)) AND ((:IsNull_ESTADO = 1 " +
                        "AND `ESTADO` IS NULL) OR (`ESTADO` = :Original_ESTADO)) AND ((:IsNull_CEP = 1 AN" +
                        "D `CEP` IS NULL) OR (`CEP` = :Original_CEP)) AND ((:IsNull_REFERENCIA = 1 AND `R" +
                        "EFERENCIA` IS NULL) OR (`REFERENCIA` = :Original_REFERENCIA)) AND ((:IsNull_ID_C" +
                        "ONTADOR = 1 AND `ID_CONTADOR` IS NULL) OR (`ID_CONTADOR` = :Original_ID_CONTADOR" +
                        ")) AND ((:IsNull_ATIVO = 1 AND `ATIVO` IS NULL) OR (`ATIVO` = :Original_ATIVO)))" +
                        "", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCLIENTE";
                param.Size = 0;
                param.SourceColumn = "IDCLIENTE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_RAZAO";
                param.Size = 0;
                param.SourceColumn = "RAZAO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_RAZAO";
                param.Size = 0;
                param.SourceColumn = "RAZAO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_FANTASIA";
                param.Size = 0;
                param.SourceColumn = "FANTASIA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_FANTASIA";
                param.Size = 0;
                param.SourceColumn = "FANTASIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CPFCNPJ";
                param.Size = 0;
                param.SourceColumn = "CPFCNPJ";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CPFCNPJ";
                param.Size = 0;
                param.SourceColumn = "CPFCNPJ";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_PESSOA";
                param.Size = 0;
                param.SourceColumn = "PESSOA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_PESSOA";
                param.Size = 0;
                param.SourceColumn = "PESSOA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CONTATO";
                param.Size = 0;
                param.SourceColumn = "CONTATO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTATO";
                param.Size = 0;
                param.SourceColumn = "CONTATO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_IDECO";
                param.Size = 0;
                param.SourceColumn = "IDECO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDECO";
                param.Size = 0;
                param.SourceColumn = "IDECO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TEL2";
                param.Size = 0;
                param.SourceColumn = "TEL2";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TEL2";
                param.Size = 0;
                param.SourceColumn = "TEL2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TEL3";
                param.Size = 0;
                param.SourceColumn = "TEL3";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TEL3";
                param.Size = 0;
                param.SourceColumn = "TEL3";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_NUMERO";
                param.Size = 0;
                param.SourceColumn = "NUMERO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_NUMERO";
                param.Size = 0;
                param.SourceColumn = "NUMERO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_RUA";
                param.Size = 0;
                param.SourceColumn = "RUA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_RUA";
                param.Size = 0;
                param.SourceColumn = "RUA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_BAIRRO";
                param.Size = 0;
                param.SourceColumn = "BAIRRO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CIDADE";
                param.Size = 0;
                param.SourceColumn = "CIDADE";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ESTADO";
                param.Size = 0;
                param.SourceColumn = "ESTADO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ESTADO";
                param.Size = 0;
                param.SourceColumn = "ESTADO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CEP";
                param.Size = 0;
                param.SourceColumn = "CEP";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CEP";
                param.Size = 0;
                param.SourceColumn = "CEP";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_REFERENCIA";
                param.Size = 0;
                param.SourceColumn = "REFERENCIA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_REFERENCIA";
                param.Size = 0;
                param.SourceColumn = "REFERENCIA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ID_CONTADOR";
                param.Size = 0;
                param.SourceColumn = "ID_CONTADOR";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ID_CONTADOR";
                param.Size = 0;
                param.SourceColumn = "ID_CONTADOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "cl_cliente";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDCLIENTE", "IDCLIENTE");
                this.TableMapping.ColumnMappings.Add("RAZAO", "RAZAO");
                this.TableMapping.ColumnMappings.Add("FANTASIA", "FANTASIA");
                this.TableMapping.ColumnMappings.Add("CPFCNPJ", "CPFCNPJ");
                this.TableMapping.ColumnMappings.Add("PESSOA", "PESSOA");
                this.TableMapping.ColumnMappings.Add("CONTATO", "CONTATO");
                this.TableMapping.ColumnMappings.Add("EMAIL", "EMAIL");
                this.TableMapping.ColumnMappings.Add("IDECO", "IDECO");
                this.TableMapping.ColumnMappings.Add("TEL1", "TEL1");
                this.TableMapping.ColumnMappings.Add("TEL2", "TEL2");
                this.TableMapping.ColumnMappings.Add("TEL3", "TEL3");
                this.TableMapping.ColumnMappings.Add("NUMERO", "NUMERO");
                this.TableMapping.ColumnMappings.Add("RUA", "RUA");
                this.TableMapping.ColumnMappings.Add("BAIRRO", "BAIRRO");
                this.TableMapping.ColumnMappings.Add("CIDADE", "CIDADE");
                this.TableMapping.ColumnMappings.Add("ESTADO", "ESTADO");
                this.TableMapping.ColumnMappings.Add("CEP", "CEP");
                this.TableMapping.ColumnMappings.Add("REFERENCIA", "REFERENCIA");
                this.TableMapping.ColumnMappings.Add("ID_CONTADOR", "ID_CONTADOR");
                this.TableMapping.ColumnMappings.Add("ATIVO", "ATIVO");
                this.TableMapping.ColumnMappings.Add("OBSERVACOES", "OBSERVACOES");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cl_clienteRow Newcl_clienteRow() {
                return ((cl_clienteRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new cl_clienteRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(cl_clienteRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.cl_clienteRowChanged != null)) {
                    this.cl_clienteRowChanged(this, new cl_clienteRowChangeEvent(((cl_clienteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.cl_clienteRowChanging != null)) {
                    this.cl_clienteRowChanging(this, new cl_clienteRowChangeEvent(((cl_clienteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.cl_clienteRowDeleted != null)) {
                    this.cl_clienteRowDeleted(this, new cl_clienteRowChangeEvent(((cl_clienteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.cl_clienteRowDeleting != null)) {
                    this.cl_clienteRowDeleting(this, new cl_clienteRowChangeEvent(((cl_clienteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removecl_clienteRow(cl_clienteRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LUA ds = new LUA();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "cl_clienteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public partial class cl_clienteRow : System.Data.DataRow {
            
            private cl_clienteDataTable tablecl_cliente;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cl_clienteRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecl_cliente = ((cl_clienteDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDCLIENTE {
                get {
                    return ((int)(this[this.tablecl_cliente.IDCLIENTEColumn]));
                }
                set {
                    this[this.tablecl_cliente.IDCLIENTEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RAZAO {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.RAZAOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.RAZAOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FANTASIA {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.FANTASIAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.FANTASIAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CPFCNPJ {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.CPFCNPJColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.CPFCNPJColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PESSOA {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.PESSOAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.PESSOAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTATO {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.CONTATOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.CONTATOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMAIL {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.EMAILColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.EMAILColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDECO {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.IDECOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.IDECOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TEL1 {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.TEL1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.TEL1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TEL2 {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.TEL2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.TEL2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TEL3 {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.TEL3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.TEL3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUMERO {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.NUMEROColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.NUMEROColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RUA {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.RUAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.RUAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BAIRRO {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.BAIRROColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.BAIRROColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CIDADE {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.CIDADEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.CIDADEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ESTADO {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.ESTADOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.ESTADOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CEP {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.CEPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.CEPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REFERENCIA {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.REFERENCIAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.REFERENCIAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_CONTADOR {
                get {
                    try {
                        return ((int)(this[this.tablecl_cliente.ID_CONTADORColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.ID_CONTADORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ATIVO {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.ATIVOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.ATIVOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OBSERVACOES {
                get {
                    try {
                        return ((string)(this[this.tablecl_cliente.OBSERVACOESColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecl_cliente.OBSERVACOESColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRAZAONull() {
                return this.IsNull(this.tablecl_cliente.RAZAOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRAZAONull() {
                this[this.tablecl_cliente.RAZAOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFANTASIANull() {
                return this.IsNull(this.tablecl_cliente.FANTASIAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFANTASIANull() {
                this[this.tablecl_cliente.FANTASIAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCPFCNPJNull() {
                return this.IsNull(this.tablecl_cliente.CPFCNPJColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCPFCNPJNull() {
                this[this.tablecl_cliente.CPFCNPJColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPESSOANull() {
                return this.IsNull(this.tablecl_cliente.PESSOAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPESSOANull() {
                this[this.tablecl_cliente.PESSOAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONTATONull() {
                return this.IsNull(this.tablecl_cliente.CONTATOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONTATONull() {
                this[this.tablecl_cliente.CONTATOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMAILNull() {
                return this.IsNull(this.tablecl_cliente.EMAILColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMAILNull() {
                this[this.tablecl_cliente.EMAILColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDECONull() {
                return this.IsNull(this.tablecl_cliente.IDECOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDECONull() {
                this[this.tablecl_cliente.IDECOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTEL1Null() {
                return this.IsNull(this.tablecl_cliente.TEL1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTEL1Null() {
                this[this.tablecl_cliente.TEL1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTEL2Null() {
                return this.IsNull(this.tablecl_cliente.TEL2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTEL2Null() {
                this[this.tablecl_cliente.TEL2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTEL3Null() {
                return this.IsNull(this.tablecl_cliente.TEL3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTEL3Null() {
                this[this.tablecl_cliente.TEL3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMERONull() {
                return this.IsNull(this.tablecl_cliente.NUMEROColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMERONull() {
                this[this.tablecl_cliente.NUMEROColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRUANull() {
                return this.IsNull(this.tablecl_cliente.RUAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRUANull() {
                this[this.tablecl_cliente.RUAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBAIRRONull() {
                return this.IsNull(this.tablecl_cliente.BAIRROColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBAIRRONull() {
                this[this.tablecl_cliente.BAIRROColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIDADENull() {
                return this.IsNull(this.tablecl_cliente.CIDADEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIDADENull() {
                this[this.tablecl_cliente.CIDADEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsESTADONull() {
                return this.IsNull(this.tablecl_cliente.ESTADOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetESTADONull() {
                this[this.tablecl_cliente.ESTADOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCEPNull() {
                return this.IsNull(this.tablecl_cliente.CEPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCEPNull() {
                this[this.tablecl_cliente.CEPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREFERENCIANull() {
                return this.IsNull(this.tablecl_cliente.REFERENCIAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREFERENCIANull() {
                this[this.tablecl_cliente.REFERENCIAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_CONTADORNull() {
                return this.IsNull(this.tablecl_cliente.ID_CONTADORColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_CONTADORNull() {
                this[this.tablecl_cliente.ID_CONTADORColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsATIVONull() {
                return this.IsNull(this.tablecl_cliente.ATIVOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetATIVONull() {
                this[this.tablecl_cliente.ATIVOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOBSERVACOESNull() {
                return this.IsNull(this.tablecl_cliente.OBSERVACOESColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOBSERVACOESNull() {
                this[this.tablecl_cliente.OBSERVACOESColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public class cl_clienteRowChangeEvent : System.EventArgs {
            
            private cl_clienteRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cl_clienteRowChangeEvent(cl_clienteRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cl_clienteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class co_contadorDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDCONTADOR;
            
            private System.Data.DataColumn columnCONTADOR;
            
            private System.Data.DataColumn columnTEL1;
            
            private System.Data.DataColumn columnTEL2;
            
            private System.Data.DataColumn columnEMAIL;
            
            private System.Data.DataColumn columnATIVO;
            
            private System.Data.DataColumn columnOBSERVACOES;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public co_contadorDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public co_contadorDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "co_contador";
                this.Name = "co_contador";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal co_contadorDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected co_contadorDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDCONTADORColumn {
                get {
                    return this.columnIDCONTADOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CONTADORColumn {
                get {
                    return this.columnCONTADOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TEL1Column {
                get {
                    return this.columnTEL1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TEL2Column {
                get {
                    return this.columnTEL2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn EMAILColumn {
                get {
                    return this.columnEMAIL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ATIVOColumn {
                get {
                    return this.columnATIVO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn OBSERVACOESColumn {
                get {
                    return this.columnOBSERVACOES;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public co_contadorRow this[int index] {
                get {
                    return ((co_contadorRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event co_contadorRowChangeEventHandler co_contadorRowChanging;
            
            public event co_contadorRowChangeEventHandler co_contadorRowChanged;
            
            public event co_contadorRowChangeEventHandler co_contadorRowDeleting;
            
            public event co_contadorRowChangeEventHandler co_contadorRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addco_contadorRow(co_contadorRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public co_contadorRow Addco_contadorRow(int IDCONTADOR, string CONTADOR, string TEL1, string TEL2, string EMAIL, string ATIVO, string OBSERVACOES) {
                co_contadorRow rowco_contadorRow = ((co_contadorRow)(this.NewRow()));
                rowco_contadorRow.ItemArray = new object[] {
                        IDCONTADOR,
                        CONTADOR,
                        TEL1,
                        TEL2,
                        EMAIL,
                        ATIVO,
                        OBSERVACOES};
                this.Rows.Add(rowco_contadorRow);
                return rowco_contadorRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public co_contadorRow FindByIDCONTADOR(int IDCONTADOR) {
                return ((co_contadorRow)(this.Rows.Find(new object[] {
                            IDCONTADOR})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                co_contadorDataTable cln = ((co_contadorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new co_contadorDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDCONTADOR = base.Columns["IDCONTADOR"];
                this.columnCONTADOR = base.Columns["CONTADOR"];
                this.columnTEL1 = base.Columns["TEL1"];
                this.columnTEL2 = base.Columns["TEL2"];
                this.columnEMAIL = base.Columns["EMAIL"];
                this.columnATIVO = base.Columns["ATIVO"];
                this.columnOBSERVACOES = base.Columns["OBSERVACOES"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDCONTADOR = new System.Data.DataColumn("IDCONTADOR", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDCONTADOR);
                this.columnCONTADOR = new System.Data.DataColumn("CONTADOR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTADOR);
                this.columnTEL1 = new System.Data.DataColumn("TEL1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEL1);
                this.columnTEL2 = new System.Data.DataColumn("TEL2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEL2);
                this.columnEMAIL = new System.Data.DataColumn("EMAIL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAIL);
                this.columnATIVO = new System.Data.DataColumn("ATIVO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnATIVO);
                this.columnOBSERVACOES = new System.Data.DataColumn("OBSERVACOES", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBSERVACOES);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIDCONTADOR}, true));
                this.columnIDCONTADOR.AllowDBNull = false;
                this.columnIDCONTADOR.Unique = true;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Port=3307;Database=lua;Persist Security" +
                            " Info=True;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from lua.co_contador", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `lua`.`co_contador` (`CONTADOR`, `TEL1`, `TEL2`, `EMAIL`, `ATIVO`, `O" +
                        "BSERVACOES`) VALUES (:CONTADOR, :TEL1, :TEL2, :EMAIL, :ATIVO, :OBSERVACOES)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTADOR";
                param.Size = 0;
                param.SourceColumn = "CONTADOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TEL2";
                param.Size = 0;
                param.SourceColumn = "TEL2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "OBSERVACOES";
                param.Size = 0;
                param.SourceColumn = "OBSERVACOES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand(@"UPDATE `lua`.`co_contador` SET `CONTADOR` = :CONTADOR, `TEL1` = :TEL1, `TEL2` = :TEL2, `EMAIL` = :EMAIL, `ATIVO` = :ATIVO, `OBSERVACOES` = :OBSERVACOES WHERE ((`IDCONTADOR` = :Original_IDCONTADOR) AND ((:IsNull_CONTADOR = 1 AND `CONTADOR` IS NULL) OR (`CONTADOR` = :Original_CONTADOR)) AND ((:IsNull_TEL1 = 1 AND `TEL1` IS NULL) OR (`TEL1` = :Original_TEL1)) AND ((:IsNull_TEL2 = 1 AND `TEL2` IS NULL) OR (`TEL2` = :Original_TEL2)) AND ((:IsNull_EMAIL = 1 AND `EMAIL` IS NULL) OR (`EMAIL` = :Original_EMAIL)) AND ((:IsNull_ATIVO = 1 AND `ATIVO` IS NULL) OR (`ATIVO` = :Original_ATIVO)))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "CONTADOR";
                param.Size = 0;
                param.SourceColumn = "CONTADOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "TEL2";
                param.Size = 0;
                param.SourceColumn = "TEL2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.String;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "OBSERVACOES";
                param.Size = 0;
                param.SourceColumn = "OBSERVACOES";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCONTADOR";
                param.Size = 0;
                param.SourceColumn = "IDCONTADOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CONTADOR";
                param.Size = 0;
                param.SourceColumn = "CONTADOR";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTADOR";
                param.Size = 0;
                param.SourceColumn = "CONTADOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TEL2";
                param.Size = 0;
                param.SourceColumn = "TEL2";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TEL2";
                param.Size = 0;
                param.SourceColumn = "TEL2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand(@"DELETE FROM `lua`.`co_contador` WHERE ((`IDCONTADOR` = :Original_IDCONTADOR) AND ((:IsNull_CONTADOR = 1 AND `CONTADOR` IS NULL) OR (`CONTADOR` = :Original_CONTADOR)) AND ((:IsNull_TEL1 = 1 AND `TEL1` IS NULL) OR (`TEL1` = :Original_TEL1)) AND ((:IsNull_TEL2 = 1 AND `TEL2` IS NULL) OR (`TEL2` = :Original_TEL2)) AND ((:IsNull_EMAIL = 1 AND `EMAIL` IS NULL) OR (`EMAIL` = :Original_EMAIL)) AND ((:IsNull_ATIVO = 1 AND `ATIVO` IS NULL) OR (`ATIVO` = :Original_ATIVO)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_IDCONTADOR";
                param.Size = 0;
                param.SourceColumn = "IDCONTADOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_CONTADOR";
                param.Size = 0;
                param.SourceColumn = "CONTADOR";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_CONTADOR";
                param.Size = 0;
                param.SourceColumn = "CONTADOR";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TEL1";
                param.Size = 0;
                param.SourceColumn = "TEL1";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_TEL2";
                param.Size = 0;
                param.SourceColumn = "TEL2";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_TEL2";
                param.Size = 0;
                param.SourceColumn = "TEL2";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_EMAIL";
                param.Size = 0;
                param.SourceColumn = "EMAIL";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiStringFixedLength;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_ATIVO";
                param.Size = 0;
                param.SourceColumn = "ATIVO";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "co_contador";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDCONTADOR", "IDCONTADOR");
                this.TableMapping.ColumnMappings.Add("CONTADOR", "CONTADOR");
                this.TableMapping.ColumnMappings.Add("TEL1", "TEL1");
                this.TableMapping.ColumnMappings.Add("TEL2", "TEL2");
                this.TableMapping.ColumnMappings.Add("EMAIL", "EMAIL");
                this.TableMapping.ColumnMappings.Add("ATIVO", "ATIVO");
                this.TableMapping.ColumnMappings.Add("OBSERVACOES", "OBSERVACOES");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public co_contadorRow Newco_contadorRow() {
                return ((co_contadorRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new co_contadorRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(co_contadorRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.co_contadorRowChanged != null)) {
                    this.co_contadorRowChanged(this, new co_contadorRowChangeEvent(((co_contadorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.co_contadorRowChanging != null)) {
                    this.co_contadorRowChanging(this, new co_contadorRowChangeEvent(((co_contadorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.co_contadorRowDeleted != null)) {
                    this.co_contadorRowDeleted(this, new co_contadorRowChangeEvent(((co_contadorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.co_contadorRowDeleting != null)) {
                    this.co_contadorRowDeleting(this, new co_contadorRowChangeEvent(((co_contadorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeco_contadorRow(co_contadorRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LUA ds = new LUA();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "co_contadorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public partial class co_contadorRow : System.Data.DataRow {
            
            private co_contadorDataTable tableco_contador;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal co_contadorRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableco_contador = ((co_contadorDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDCONTADOR {
                get {
                    return ((int)(this[this.tableco_contador.IDCONTADORColumn]));
                }
                set {
                    this[this.tableco_contador.IDCONTADORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTADOR {
                get {
                    try {
                        return ((string)(this[this.tableco_contador.CONTADORColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableco_contador.CONTADORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TEL1 {
                get {
                    try {
                        return ((string)(this[this.tableco_contador.TEL1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableco_contador.TEL1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TEL2 {
                get {
                    try {
                        return ((string)(this[this.tableco_contador.TEL2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableco_contador.TEL2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMAIL {
                get {
                    try {
                        return ((string)(this[this.tableco_contador.EMAILColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableco_contador.EMAILColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ATIVO {
                get {
                    try {
                        return ((string)(this[this.tableco_contador.ATIVOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableco_contador.ATIVOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OBSERVACOES {
                get {
                    try {
                        return ((string)(this[this.tableco_contador.OBSERVACOESColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableco_contador.OBSERVACOESColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONTADORNull() {
                return this.IsNull(this.tableco_contador.CONTADORColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONTADORNull() {
                this[this.tableco_contador.CONTADORColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTEL1Null() {
                return this.IsNull(this.tableco_contador.TEL1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTEL1Null() {
                this[this.tableco_contador.TEL1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTEL2Null() {
                return this.IsNull(this.tableco_contador.TEL2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTEL2Null() {
                this[this.tableco_contador.TEL2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMAILNull() {
                return this.IsNull(this.tableco_contador.EMAILColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMAILNull() {
                this[this.tableco_contador.EMAILColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsATIVONull() {
                return this.IsNull(this.tableco_contador.ATIVOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetATIVONull() {
                this[this.tableco_contador.ATIVOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOBSERVACOESNull() {
                return this.IsNull(this.tableco_contador.OBSERVACOESColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOBSERVACOESNull() {
                this[this.tableco_contador.OBSERVACOESColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public class co_contadorRowChangeEvent : System.EventArgs {
            
            private co_contadorRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public co_contadorRowChangeEvent(co_contadorRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public co_contadorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tb_parametrosDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnversao_db;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_parametrosDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_parametrosDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "tb_parametros";
                this.Name = "tb_parametros";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tb_parametrosDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tb_parametrosDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn versao_dbColumn {
                get {
                    return this.columnversao_db;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_parametrosRow this[int index] {
                get {
                    return ((tb_parametrosRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event tb_parametrosRowChangeEventHandler tb_parametrosRowChanging;
            
            public event tb_parametrosRowChangeEventHandler tb_parametrosRowChanged;
            
            public event tb_parametrosRowChangeEventHandler tb_parametrosRowDeleting;
            
            public event tb_parametrosRowChangeEventHandler tb_parametrosRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtb_parametrosRow(tb_parametrosRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_parametrosRow Addtb_parametrosRow(string versao_db) {
                tb_parametrosRow rowtb_parametrosRow = ((tb_parametrosRow)(this.NewRow()));
                rowtb_parametrosRow.ItemArray = new object[] {
                        versao_db};
                this.Rows.Add(rowtb_parametrosRow);
                return rowtb_parametrosRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                tb_parametrosDataTable cln = ((tb_parametrosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new tb_parametrosDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnversao_db = base.Columns["versao_db"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnversao_db = new System.Data.DataColumn("versao_db", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversao_db);
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Port=3307;Database=lua;Persist Security" +
                            " Info=True;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from lua.tb_parametros", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `lua`.`tb_parametros` (`versao_db`) VALUES (:versao_db)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "versao_db";
                param.Size = 0;
                param.SourceColumn = "versao_db";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand("UPDATE `lua`.`tb_parametros` SET `versao_db` = :versao_db WHERE (((:IsNull_versao" +
                        "_db = 1 AND `versao_db` IS NULL) OR (`versao_db` = :Original_versao_db)))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "versao_db";
                param.Size = 0;
                param.SourceColumn = "versao_db";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_versao_db";
                param.Size = 0;
                param.SourceColumn = "versao_db";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_versao_db";
                param.Size = 0;
                param.SourceColumn = "versao_db";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `lua`.`tb_parametros` WHERE (((:IsNull_versao_db = 1 AND `versao_db` " +
                        "IS NULL) OR (`versao_db` = :Original_versao_db)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_versao_db";
                param.Size = 0;
                param.SourceColumn = "versao_db";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.AnsiString;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_versao_db";
                param.Size = 0;
                param.SourceColumn = "versao_db";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "tb_parametros";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("versao_db", "versao_db");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_parametrosRow Newtb_parametrosRow() {
                return ((tb_parametrosRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new tb_parametrosRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(tb_parametrosRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tb_parametrosRowChanged != null)) {
                    this.tb_parametrosRowChanged(this, new tb_parametrosRowChangeEvent(((tb_parametrosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tb_parametrosRowChanging != null)) {
                    this.tb_parametrosRowChanging(this, new tb_parametrosRowChangeEvent(((tb_parametrosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tb_parametrosRowDeleted != null)) {
                    this.tb_parametrosRowDeleted(this, new tb_parametrosRowChangeEvent(((tb_parametrosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tb_parametrosRowDeleting != null)) {
                    this.tb_parametrosRowDeleting(this, new tb_parametrosRowChangeEvent(((tb_parametrosRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetb_parametrosRow(tb_parametrosRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LUA ds = new LUA();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tb_parametrosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public partial class tb_parametrosRow : System.Data.DataRow {
            
            private tb_parametrosDataTable tabletb_parametros;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tb_parametrosRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletb_parametros = ((tb_parametrosDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versao_db {
                get {
                    try {
                        return ((string)(this[this.tabletb_parametros.versao_dbColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletb_parametros.versao_dbColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isversao_dbNull() {
                return this.IsNull(this.tabletb_parametros.versao_dbColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setversao_dbNull() {
                this[this.tabletb_parametros.versao_dbColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public class tb_parametrosRowChangeEvent : System.EventArgs {
            
            private tb_parametrosRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_parametrosRowChangeEvent(tb_parametrosRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tb_parametrosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TableDataTable : Devart.Data.MySql.MySqlDataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIDCHAMADO;
            
            private System.Data.DataColumn columnDATAABERTURA;
            
            private System.Data.DataColumn columnSTATUS;
            
            private System.Data.DataColumn columnFANTASIACLIENTE;
            
            private System.Data.DataColumn columnSOFTWARE;
            
            private System.Data.DataColumn columnASSUNTO;
            
            private System.Data.DataColumn columnCATEGORIA;
            
            private System.Data.DataColumn columnTELAROTINA;
            
            private System.Data.DataColumn columnPRIORIDADE;
            
            private System.Data.DataColumn columnCONTATO;
            
            private System.Data.DataColumn columnANALISTAANDAMENTO;
            
            private System.Data.DataColumn columnANALISTAFINALIZADO;
            
            private System.Data.DataColumn columnTEL1;
            
            private System.Data.DataColumn columnIDSOL;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableDataTable() : 
                    this(((Devart.Data.MySql.MySqlConnection)(null))) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableDataTable(Devart.Data.MySql.MySqlConnection connection) {
                this.TableName = "Table";
                this.Name = "_Table";
                this.Connection = connection;
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableDataTable(Devart.Data.MySql.MySqlDataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TableDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDCHAMADOColumn {
                get {
                    return this.columnIDCHAMADO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn DATAABERTURAColumn {
                get {
                    return this.columnDATAABERTURA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn FANTASIACLIENTEColumn {
                get {
                    return this.columnFANTASIACLIENTE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn SOFTWAREColumn {
                get {
                    return this.columnSOFTWARE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ASSUNTOColumn {
                get {
                    return this.columnASSUNTO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CATEGORIAColumn {
                get {
                    return this.columnCATEGORIA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TELAROTINAColumn {
                get {
                    return this.columnTELAROTINA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn PRIORIDADEColumn {
                get {
                    return this.columnPRIORIDADE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn CONTATOColumn {
                get {
                    return this.columnCONTATO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ANALISTAANDAMENTOColumn {
                get {
                    return this.columnANALISTAANDAMENTO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn ANALISTAFINALIZADOColumn {
                get {
                    return this.columnANALISTAFINALIZADO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn TEL1Column {
                get {
                    return this.columnTEL1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.Browsable(false)]
            public System.Data.DataColumn IDSOLColumn {
                get {
                    return this.columnIDSOL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRow this[int index] {
                get {
                    return ((TableRow)(this.Rows[index]));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand SelectCommand {
                get {
                    return base.SelectCommand;
                }
                set {
                    base.SelectCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand InsertCommand {
                get {
                    return base.InsertCommand;
                }
                set {
                    base.InsertCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand UpdateCommand {
                get {
                    return base.UpdateCommand;
                }
                set {
                    base.UpdateCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlCommand DeleteCommand {
                get {
                    return base.DeleteCommand;
                }
                set {
                    base.DeleteCommand = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new Devart.Data.MySql.MySqlConnection Connection {
                get {
                    return base.Connection;
                }
                set {
                    base.Connection = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new object Owner {
                get {
                    return base.Owner;
                }
                set {
                    base.Owner = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string TableName {
                get {
                    return base.TableName;
                }
                set {
                    base.TableName = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new string Name {
                get {
                    return base.Name;
                }
                set {
                    base.Name = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.DataColumnCollection Columns {
                get {
                    return base.Columns;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.ConstraintCollection Constraints {
                get {
                    return base.Constraints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
            [System.ComponentModel.BrowsableAttribute(false)]
            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
            public new System.Data.Common.DataTableMapping TableMapping {
                get {
                    return base.TableMapping;
                }
            }
            
            public event TableRowChangeEventHandler TableRowChanging;
            
            public event TableRowChangeEventHandler TableRowChanged;
            
            public event TableRowChangeEventHandler TableRowDeleting;
            
            public event TableRowChangeEventHandler TableRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTableRow(TableRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRow AddTableRow(string IDCHAMADO, System.DateTime DATAABERTURA, string STATUS, string FANTASIACLIENTE, string SOFTWARE, string ASSUNTO, string CATEGORIA, string TELAROTINA, string PRIORIDADE, string CONTATO, string ANALISTAANDAMENTO, string ANALISTAFINALIZADO, string TEL1, string IDSOL) {
                TableRow rowTableRow = ((TableRow)(this.NewRow()));
                rowTableRow.ItemArray = new object[] {
                        IDCHAMADO,
                        DATAABERTURA,
                        STATUS,
                        FANTASIACLIENTE,
                        SOFTWARE,
                        ASSUNTO,
                        CATEGORIA,
                        TELAROTINA,
                        PRIORIDADE,
                        CONTATO,
                        ANALISTAANDAMENTO,
                        ANALISTAFINALIZADO,
                        TEL1,
                        IDSOL};
                this.Rows.Add(rowTableRow);
                return rowTableRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TableDataTable cln = ((TableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TableDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDCHAMADO = base.Columns["IDCHAMADO"];
                this.columnDATAABERTURA = base.Columns["DATAABERTURA"];
                this.columnSTATUS = base.Columns["STATUS"];
                this.columnFANTASIACLIENTE = base.Columns["FANTASIACLIENTE"];
                this.columnSOFTWARE = base.Columns["SOFTWARE"];
                this.columnASSUNTO = base.Columns["ASSUNTO"];
                this.columnCATEGORIA = base.Columns["CATEGORIA"];
                this.columnTELAROTINA = base.Columns["TELAROTINA"];
                this.columnPRIORIDADE = base.Columns["PRIORIDADE"];
                this.columnCONTATO = base.Columns["CONTATO"];
                this.columnANALISTAANDAMENTO = base.Columns["ANALISTAANDAMENTO"];
                this.columnANALISTAFINALIZADO = base.Columns["ANALISTAFINALIZADO"];
                this.columnTEL1 = base.Columns["TEL1"];
                this.columnIDSOL = base.Columns["IDSOL"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDCHAMADO = new System.Data.DataColumn("IDCHAMADO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDCHAMADO);
                this.columnDATAABERTURA = new System.Data.DataColumn("DATAABERTURA", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATAABERTURA);
                this.columnSTATUS = new System.Data.DataColumn("STATUS", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.columnFANTASIACLIENTE = new System.Data.DataColumn("FANTASIACLIENTE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFANTASIACLIENTE);
                this.columnSOFTWARE = new System.Data.DataColumn("SOFTWARE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOFTWARE);
                this.columnASSUNTO = new System.Data.DataColumn("ASSUNTO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnASSUNTO);
                this.columnCATEGORIA = new System.Data.DataColumn("CATEGORIA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORIA);
                this.columnTELAROTINA = new System.Data.DataColumn("TELAROTINA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTELAROTINA);
                this.columnPRIORIDADE = new System.Data.DataColumn("PRIORIDADE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRIORIDADE);
                this.columnCONTATO = new System.Data.DataColumn("CONTATO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTATO);
                this.columnANALISTAANDAMENTO = new System.Data.DataColumn("ANALISTAANDAMENTO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnANALISTAANDAMENTO);
                this.columnANALISTAFINALIZADO = new System.Data.DataColumn("ANALISTAFINALIZADO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnANALISTAFINALIZADO);
                this.columnTEL1 = new System.Data.DataColumn("TEL1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEL1);
                this.columnIDSOL = new System.Data.DataColumn("IDSOL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDSOL);
                this.columnIDCHAMADO.AllowDBNull = false;
                this.columnSTATUS.AllowDBNull = false;
                this.columnFANTASIACLIENTE.AllowDBNull = false;
                this.columnSOFTWARE.AllowDBNull = false;
                this.columnASSUNTO.AllowDBNull = false;
                this.columnCATEGORIA.AllowDBNull = false;
                this.columnTELAROTINA.AllowDBNull = false;
                this.columnPRIORIDADE.AllowDBNull = false;
                this.columnCONTATO.AllowDBNull = false;
                this.columnANALISTAANDAMENTO.AllowDBNull = false;
                this.columnANALISTAFINALIZADO.AllowDBNull = false;
                this.columnTEL1.AllowDBNull = false;
                this.columnIDSOL.AllowDBNull = false;
                if ((this.Connection == null)) {
                    this.Connection = new Devart.Data.MySql.MySqlConnection("User Id=root;Password=root;Host=localhost;Port=3307;Database=lua;Persist Security" +
                            " Info=True;");
                }
                this.SelectCommand = new Devart.Data.MySql.MySqlCommand("select * from lua.vwpesquisachamado", Connection);
                this.SelectCommand.CommandType = System.Data.CommandType.Text;
                this.InsertCommand = new Devart.Data.MySql.MySqlCommand("INSERT INTO `ch_chamado` (`DATAABERTURA`) VALUES (:DATAABERTURA)", Connection);
                this.InsertCommand.CommandType = System.Data.CommandType.Text;
                Devart.Data.MySql.MySqlParameter param;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DATAABERTURA";
                param.Size = 0;
                param.SourceColumn = "DATAABERTURA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.InsertCommand.Parameters.Add(param);
                this.UpdateCommand = new Devart.Data.MySql.MySqlCommand("UPDATE `ch_chamado` SET `DATAABERTURA` = :DATAABERTURA WHERE (((:IsNull_DATAABERT" +
                        "URA = 1 AND `DATAABERTURA` IS NULL) OR (`DATAABERTURA` = :Original_DATAABERTURA)" +
                        "))", Connection);
                this.UpdateCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "DATAABERTURA";
                param.Size = 0;
                param.SourceColumn = "DATAABERTURA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Current;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DATAABERTURA";
                param.Size = 0;
                param.SourceColumn = "DATAABERTURA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DATAABERTURA";
                param.Size = 0;
                param.SourceColumn = "DATAABERTURA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.UpdateCommand.Parameters.Add(param);
                this.DeleteCommand = new Devart.Data.MySql.MySqlCommand("DELETE FROM `ch_chamado` WHERE (((:IsNull_DATAABERTURA = 1 AND `DATAABERTURA` IS " +
                        "NULL) OR (`DATAABERTURA` = :Original_DATAABERTURA)))", Connection);
                this.DeleteCommand.CommandType = System.Data.CommandType.Text;
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.Int32;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "IsNull_DATAABERTURA";
                param.Size = 0;
                param.SourceColumn = "DATAABERTURA";
                param.SourceColumnNullMapping = true;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                param = new Devart.Data.MySql.MySqlParameter();
                param.DbType = System.Data.DbType.DateTime;
                param.Direction = System.Data.ParameterDirection.Input;
                param.IsNullable = false;
                param.ParameterName = "Original_DATAABERTURA";
                param.Size = 0;
                param.SourceColumn = "DATAABERTURA";
                param.SourceColumnNullMapping = false;
                param.SourceVersion = System.Data.DataRowVersion.Original;
                this.DeleteCommand.Parameters.Add(param);
                this.TableMapping.DataSetTable = "Table";
                this.TableMapping.SourceTable = "SourceTable1";
                this.TableMapping.ColumnMappings.Add("IDCHAMADO", "IDCHAMADO");
                this.TableMapping.ColumnMappings.Add("DATAABERTURA", "DATAABERTURA");
                this.TableMapping.ColumnMappings.Add("STATUS", "STATUS");
                this.TableMapping.ColumnMappings.Add("FANTASIACLIENTE", "FANTASIACLIENTE");
                this.TableMapping.ColumnMappings.Add("SOFTWARE", "SOFTWARE");
                this.TableMapping.ColumnMappings.Add("ASSUNTO", "ASSUNTO");
                this.TableMapping.ColumnMappings.Add("CATEGORIA", "CATEGORIA");
                this.TableMapping.ColumnMappings.Add("TELAROTINA", "TELAROTINA");
                this.TableMapping.ColumnMappings.Add("PRIORIDADE", "PRIORIDADE");
                this.TableMapping.ColumnMappings.Add("CONTATO", "CONTATO");
                this.TableMapping.ColumnMappings.Add("ANALISTAANDAMENTO", "ANALISTAANDAMENTO");
                this.TableMapping.ColumnMappings.Add("ANALISTAFINALIZADO", "ANALISTAFINALIZADO");
                this.TableMapping.ColumnMappings.Add("TEL1", "TEL1");
                this.TableMapping.ColumnMappings.Add("IDSOL", "IDSOL");
                this.CachedUpdates = true;
                this.FetchAll = true;
                this.MaxRecords = 0;
                this.NonBlocking = false;
                this.QueryRecordCount = false;
                this.Quoted = false;
                this.ReturnProviderSpecificTypes = false;
                this.StartRecord = 0;
                this.UpdatingTable = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRow NewTableRow() {
                return ((TableRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TableRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TableRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TableRowChanged != null)) {
                    this.TableRowChanged(this, new TableRowChangeEvent(((TableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TableRowChanging != null)) {
                    this.TableRowChanging(this, new TableRowChangeEvent(((TableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TableRowDeleted != null)) {
                    this.TableRowDeleted(this, new TableRowChangeEvent(((TableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TableRowDeleting != null)) {
                    this.TableRowDeleting(this, new TableRowChangeEvent(((TableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTableRow(TableRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                LUA ds = new LUA();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void CreateColumns() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeSelectCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeInsertCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeUpdateCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeDeleteCommand() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConnection() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeOwner() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeName() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeColumns() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeConstraints() {
                return false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool ShouldSerializeTableMapping() {
                return false;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public partial class TableRow : System.Data.DataRow {
            
            private TableDataTable table_Table;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_Table = ((TableDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDCHAMADO {
                get {
                    return ((string)(this[this.table_Table.IDCHAMADOColumn]));
                }
                set {
                    this[this.table_Table.IDCHAMADOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATAABERTURA {
                get {
                    try {
                        return ((System.DateTime)(this[this.table_Table.DATAABERTURAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.DATAABERTURAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATUS {
                get {
                    return ((string)(this[this.table_Table.STATUSColumn]));
                }
                set {
                    this[this.table_Table.STATUSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FANTASIACLIENTE {
                get {
                    return ((string)(this[this.table_Table.FANTASIACLIENTEColumn]));
                }
                set {
                    this[this.table_Table.FANTASIACLIENTEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SOFTWARE {
                get {
                    return ((string)(this[this.table_Table.SOFTWAREColumn]));
                }
                set {
                    this[this.table_Table.SOFTWAREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ASSUNTO {
                get {
                    return ((string)(this[this.table_Table.ASSUNTOColumn]));
                }
                set {
                    this[this.table_Table.ASSUNTOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORIA {
                get {
                    return ((string)(this[this.table_Table.CATEGORIAColumn]));
                }
                set {
                    this[this.table_Table.CATEGORIAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TELAROTINA {
                get {
                    return ((string)(this[this.table_Table.TELAROTINAColumn]));
                }
                set {
                    this[this.table_Table.TELAROTINAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRIORIDADE {
                get {
                    return ((string)(this[this.table_Table.PRIORIDADEColumn]));
                }
                set {
                    this[this.table_Table.PRIORIDADEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTATO {
                get {
                    return ((string)(this[this.table_Table.CONTATOColumn]));
                }
                set {
                    this[this.table_Table.CONTATOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ANALISTAANDAMENTO {
                get {
                    return ((string)(this[this.table_Table.ANALISTAANDAMENTOColumn]));
                }
                set {
                    this[this.table_Table.ANALISTAANDAMENTOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ANALISTAFINALIZADO {
                get {
                    return ((string)(this[this.table_Table.ANALISTAFINALIZADOColumn]));
                }
                set {
                    this[this.table_Table.ANALISTAFINALIZADOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TEL1 {
                get {
                    return ((string)(this[this.table_Table.TEL1Column]));
                }
                set {
                    this[this.table_Table.TEL1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDSOL {
                get {
                    return ((string)(this[this.table_Table.IDSOLColumn]));
                }
                set {
                    this[this.table_Table.IDSOLColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATAABERTURANull() {
                return this.IsNull(this.table_Table.DATAABERTURAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATAABERTURANull() {
                this[this.table_Table.DATAABERTURAColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Devart.Common.DataSetGenerator.TypedDataSetGenerator", "5.0.1964.0")]
        public class TableRowChangeEvent : System.EventArgs {
            
            private TableRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRowChangeEvent(TableRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
